// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-hyperv/provider/go/hyperv/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HardDriveInput struct {
	ControllerLocation int    `pulumi:"controllerLocation"`
	ControllerNumber   int    `pulumi:"controllerNumber"`
	ControllerType     string `pulumi:"controllerType"`
	Path               string `pulumi:"path"`
}

// HardDriveInputInput is an input type that accepts HardDriveInputArgs and HardDriveInputOutput values.
// You can construct a concrete instance of `HardDriveInputInput` via:
//
//	HardDriveInputArgs{...}
type HardDriveInputInput interface {
	pulumi.Input

	ToHardDriveInputOutput() HardDriveInputOutput
	ToHardDriveInputOutputWithContext(context.Context) HardDriveInputOutput
}

type HardDriveInputArgs struct {
	ControllerLocation pulumi.IntInput    `pulumi:"controllerLocation"`
	ControllerNumber   pulumi.IntInput    `pulumi:"controllerNumber"`
	ControllerType     pulumi.StringInput `pulumi:"controllerType"`
	Path               pulumi.StringInput `pulumi:"path"`
}

func (HardDriveInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HardDriveInput)(nil)).Elem()
}

func (i HardDriveInputArgs) ToHardDriveInputOutput() HardDriveInputOutput {
	return i.ToHardDriveInputOutputWithContext(context.Background())
}

func (i HardDriveInputArgs) ToHardDriveInputOutputWithContext(ctx context.Context) HardDriveInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardDriveInputOutput)
}

// HardDriveInputArrayInput is an input type that accepts HardDriveInputArray and HardDriveInputArrayOutput values.
// You can construct a concrete instance of `HardDriveInputArrayInput` via:
//
//	HardDriveInputArray{ HardDriveInputArgs{...} }
type HardDriveInputArrayInput interface {
	pulumi.Input

	ToHardDriveInputArrayOutput() HardDriveInputArrayOutput
	ToHardDriveInputArrayOutputWithContext(context.Context) HardDriveInputArrayOutput
}

type HardDriveInputArray []HardDriveInputInput

func (HardDriveInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HardDriveInput)(nil)).Elem()
}

func (i HardDriveInputArray) ToHardDriveInputArrayOutput() HardDriveInputArrayOutput {
	return i.ToHardDriveInputArrayOutputWithContext(context.Background())
}

func (i HardDriveInputArray) ToHardDriveInputArrayOutputWithContext(ctx context.Context) HardDriveInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardDriveInputArrayOutput)
}

type HardDriveInputOutput struct{ *pulumi.OutputState }

func (HardDriveInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardDriveInput)(nil)).Elem()
}

func (o HardDriveInputOutput) ToHardDriveInputOutput() HardDriveInputOutput {
	return o
}

func (o HardDriveInputOutput) ToHardDriveInputOutputWithContext(ctx context.Context) HardDriveInputOutput {
	return o
}

func (o HardDriveInputOutput) ControllerLocation() pulumi.IntOutput {
	return o.ApplyT(func(v HardDriveInput) int { return v.ControllerLocation }).(pulumi.IntOutput)
}

func (o HardDriveInputOutput) ControllerNumber() pulumi.IntOutput {
	return o.ApplyT(func(v HardDriveInput) int { return v.ControllerNumber }).(pulumi.IntOutput)
}

func (o HardDriveInputOutput) ControllerType() pulumi.StringOutput {
	return o.ApplyT(func(v HardDriveInput) string { return v.ControllerType }).(pulumi.StringOutput)
}

func (o HardDriveInputOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v HardDriveInput) string { return v.Path }).(pulumi.StringOutput)
}

type HardDriveInputArrayOutput struct{ *pulumi.OutputState }

func (HardDriveInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HardDriveInput)(nil)).Elem()
}

func (o HardDriveInputArrayOutput) ToHardDriveInputArrayOutput() HardDriveInputArrayOutput {
	return o
}

func (o HardDriveInputArrayOutput) ToHardDriveInputArrayOutputWithContext(ctx context.Context) HardDriveInputArrayOutput {
	return o
}

func (o HardDriveInputArrayOutput) Index(i pulumi.IntInput) HardDriveInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HardDriveInput {
		return vs[0].([]HardDriveInput)[vs[1].(int)]
	}).(HardDriveInputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HardDriveInputInput)(nil)).Elem(), HardDriveInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardDriveInputArrayInput)(nil)).Elem(), HardDriveInputArray{})
	pulumi.RegisterOutputType(HardDriveInputOutput{})
	pulumi.RegisterOutputType(HardDriveInputArrayOutput{})
}
