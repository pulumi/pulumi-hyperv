// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-hyperv-provider/provider/go/hyperv/internal"
	"github.com/pulumi/pulumi-hyperv-provider/provider/go/hyperv/networkadapter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// # Hyper-V Machine Resource
//
// ## Overview
//
// The Machine resource in the Pulumi Hyper-V provider allows you to create, manage, and delete virtual machines on a Hyper-V host. This resource interacts with the Virtual Machine Management Service (VMMS) to perform virtual machine operations.
//
// ## Features
//
// - Create and delete Hyper-V virtual machines
// - Configure VM hardware properties including:
//   - Memory allocation (static or dynamic with min/max)
//   - Processor count
//   - VM generation (Gen 1 or Gen 2)
//   - Auto start/stop actions
//
// - Attach hard drives with custom controller configuration
// - Configure network adapters with virtual switch connections
// - Unique VM identification with automatic ID generation
//
// ## Implementation Details
//
// ### Resource Structure
//
// The Machine resource implementation consists of multiple files:
// - `machine.go` - Core resource type definition, input/output models, and annotations
// - `machineController.go` - Implementation of CRUD operations
// - `machineOutputs.go` - Output-specific methods
//
// ### Virtual Machine Creation
//
// The `Create` method performs the following steps:
//
// 1. **Initialize Connection**: Establishes a connection to the Hyper-V host using WMI
// 2. **Configure VM Settings**:
//   - Sets the virtual machine generation (defaults to Generation 2)
//   - Configures memory settings (defaults to 1024 MB)
//   - Sets dynamic memory with min/max values if requested
//   - Sets processor count (defaults to 1 vCPU)
//   - Configures auto start/stop actions
//
// 3. **Create VM**: Calls the Hyper-V API to create a new virtual machine with the specified settings
// 4. **Attach Hard Drives**: Attaches any specified hard drives to the VM
// 5. **Configure Network Adapters**: Adds any specified network adapters to the VM
//
// ### Virtual Machine Read
//
// The `Read` method retrieves the current state of a virtual machine by:
// 1. Connecting to the Hyper-V host
// 2. Getting the VM by name
// 3. Retrieving VM properties including:
//   - VM ID
//   - Memory settings (including dynamic memory configuration)
//   - Processor configuration
//   - Generation
//   - Auto start/stop actions
//
// ### Virtual Machine Update
//
// The `Update` method currently provides a minimal implementation that preserves the VM's state while updating its metadata.
//
// ### Virtual Machine Delete
//
// The `Delete` method:
// 1. Connects to the Hyper-V host
// 2. Gets the virtual machine by name
// 3. Starts the VM (to ensure it's in a state that can be properly deleted)
// 4. Gracefully stops the VM
// 5. Deletes the virtual machine
//
// ## Available Properties
//
// | Property | Type | Description | Default |
// |----------|------|-------------|---------|
// | `machineName` | string | Name of the Virtual Machine | (required) |
// | `generation` | int | Generation of the Virtual Machine (1 or 2) | 2 |
// | `processorCount` | int | Number of processors to allocate | 1 |
// | `memorySize` | int | Memory size in MB | 1024 |
// | `dynamicMemory` | bool | Enable dynamic memory for the VM | false |
// | `minimumMemory` | int | Minimum memory in MB when using dynamic memory | - |
// | `maximumMemory` | int | Maximum memory in MB when using dynamic memory | - |
// | `autoStartAction` | string | Action on host start (Nothing, StartIfRunning, Start) | Nothing |
// | `autoStopAction` | string | Action on host shutdown (TurnOff, Save, ShutDown) | TurnOff |
// | `networkAdapters` | array | Network adapters to attach to the VM | [] |
// | `hardDrives` | array | Hard drives to attach to the VM | [] |
// | `triggers` | array | Values that trigger resource replacement when changed | (optional) |
//
// ### Network Adapter Properties
//
// | Property | Type | Description | Default |
// |----------|------|-------------|---------|
// | `name` | string | Name of the network adapter | "Network Adapter" |
// | `switchName` | string | Name of the virtual switch to connect to | (required) |
//
// ### Hard Drive Properties
//
// | Property | Type | Description | Default |
// |----------|------|-------------|---------|
// | `path` | string | Path to the VHD/VHDX file | (required) |
// | `controllerType` | string | Type of controller (IDE or SCSI) | SCSI |
// | `controllerNumber` | int | Controller number | 0 |
// | `controllerLocation` | int | Controller location | 0 |
//
// ## Usage Examples
//
// ## Related Documentation
//
// - [Microsoft Hyper-V Documentation](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-on-windows-server)
// - [Pulumi Hyper-V Provider Documentation](https://www.pulumi.com/registry/packages/hyperv/)
type Machine struct {
	pulumi.CustomResourceState

	// The action to take when the host starts. Valid values are Nothing, StartIfRunning, and Start. Defaults to Nothing.
	AutoStartAction pulumi.StringPtrOutput `pulumi:"autoStartAction"`
	// The action to take when the host shuts down. Valid values are TurnOff, Save, and ShutDown. Defaults to TurnOff.
	AutoStopAction pulumi.StringPtrOutput `pulumi:"autoStopAction"`
	// The command to run on create.
	Create pulumi.StringPtrOutput `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete pulumi.StringPtrOutput `pulumi:"delete"`
	// Whether to enable dynamic memory for the Virtual Machine. Defaults to false.
	DynamicMemory pulumi.BoolPtrOutput `pulumi:"dynamicMemory"`
	// Generation of the Virtual Machine. Defaults to 2.
	Generation pulumi.IntPtrOutput `pulumi:"generation"`
	// Hard drives to attach to the Virtual Machine.
	HardDrives HardDriveInputArrayOutput `pulumi:"hardDrives"`
	// Name of the Virtual Machine
	MachineName pulumi.StringPtrOutput `pulumi:"machineName"`
	// Maximum amount of memory that can be allocated to the Virtual Machine in MB when using dynamic memory.
	MaximumMemory pulumi.IntPtrOutput `pulumi:"maximumMemory"`
	// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
	MemorySize pulumi.IntPtrOutput `pulumi:"memorySize"`
	// Minimum amount of memory to allocate to the Virtual Machine in MB when using dynamic memory.
	MinimumMemory pulumi.IntPtrOutput `pulumi:"minimumMemory"`
	// Network adapters to attach to the Virtual Machine.
	NetworkAdapters networkadapter.NetworkAdapterInputsArrayOutput `pulumi:"networkAdapters"`
	// Number of processors to allocate to the Virtual Machine. Defaults to 1.
	ProcessorCount pulumi.IntPtrOutput `pulumi:"processorCount"`
	// Trigger a resource replacement on changes to any of these values. The
	// trigger values can be of any type. If a value is different in the current update compared to the
	// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
	// Please see the resource documentation for examples.
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update pulumi.StringPtrOutput `pulumi:"update"`
	VmId   pulumi.StringOutput    `pulumi:"vmId"`
}

// NewMachine registers a new resource with the given unique name, arguments, and options.
func NewMachine(ctx *pulumi.Context,
	name string, args *MachineArgs, opts ...pulumi.ResourceOption) (*Machine, error) {
	if args == nil {
		args = &MachineArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"networkAdapters[*].triggers[*]",
		"triggers[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Machine
	err := ctx.RegisterResource("hyperv:machine:Machine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachine gets an existing Machine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineState, opts ...pulumi.ResourceOption) (*Machine, error) {
	var resource Machine
	err := ctx.ReadResource("hyperv:machine:Machine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Machine resources.
type machineState struct {
}

type MachineState struct {
}

func (MachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineState)(nil)).Elem()
}

type machineArgs struct {
	// The action to take when the host starts. Valid values are Nothing, StartIfRunning, and Start. Defaults to Nothing.
	AutoStartAction *string `pulumi:"autoStartAction"`
	// The action to take when the host shuts down. Valid values are TurnOff, Save, and ShutDown. Defaults to TurnOff.
	AutoStopAction *string `pulumi:"autoStopAction"`
	// The command to run on create.
	Create *string `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *string `pulumi:"delete"`
	// Whether to enable dynamic memory for the Virtual Machine. Defaults to false.
	DynamicMemory *bool `pulumi:"dynamicMemory"`
	// Generation of the Virtual Machine. Defaults to 2.
	Generation *int `pulumi:"generation"`
	// Hard drives to attach to the Virtual Machine.
	HardDrives []HardDriveInput `pulumi:"hardDrives"`
	// Name of the Virtual Machine
	MachineName *string `pulumi:"machineName"`
	// Maximum amount of memory that can be allocated to the Virtual Machine in MB when using dynamic memory.
	MaximumMemory *int `pulumi:"maximumMemory"`
	// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
	MemorySize *int `pulumi:"memorySize"`
	// Minimum amount of memory to allocate to the Virtual Machine in MB when using dynamic memory.
	MinimumMemory *int `pulumi:"minimumMemory"`
	// Network adapters to attach to the Virtual Machine.
	NetworkAdapters []networkadapter.NetworkAdapterInputs `pulumi:"networkAdapters"`
	// Number of processors to allocate to the Virtual Machine. Defaults to 1.
	ProcessorCount *int `pulumi:"processorCount"`
	// Trigger a resource replacement on changes to any of these values. The
	// trigger values can be of any type. If a value is different in the current update compared to the
	// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
	// Please see the resource documentation for examples.
	Triggers []interface{} `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *string `pulumi:"update"`
}

// The set of arguments for constructing a Machine resource.
type MachineArgs struct {
	// The action to take when the host starts. Valid values are Nothing, StartIfRunning, and Start. Defaults to Nothing.
	AutoStartAction pulumi.StringPtrInput
	// The action to take when the host shuts down. Valid values are TurnOff, Save, and ShutDown. Defaults to TurnOff.
	AutoStopAction pulumi.StringPtrInput
	// The command to run on create.
	Create pulumi.StringPtrInput
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete pulumi.StringPtrInput
	// Whether to enable dynamic memory for the Virtual Machine. Defaults to false.
	DynamicMemory pulumi.BoolPtrInput
	// Generation of the Virtual Machine. Defaults to 2.
	Generation pulumi.IntPtrInput
	// Hard drives to attach to the Virtual Machine.
	HardDrives HardDriveInputArrayInput
	// Name of the Virtual Machine
	MachineName pulumi.StringPtrInput
	// Maximum amount of memory that can be allocated to the Virtual Machine in MB when using dynamic memory.
	MaximumMemory pulumi.IntPtrInput
	// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
	MemorySize pulumi.IntPtrInput
	// Minimum amount of memory to allocate to the Virtual Machine in MB when using dynamic memory.
	MinimumMemory pulumi.IntPtrInput
	// Network adapters to attach to the Virtual Machine.
	NetworkAdapters networkadapter.NetworkAdapterInputsArrayInput
	// Number of processors to allocate to the Virtual Machine. Defaults to 1.
	ProcessorCount pulumi.IntPtrInput
	// Trigger a resource replacement on changes to any of these values. The
	// trigger values can be of any type. If a value is different in the current update compared to the
	// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
	// Please see the resource documentation for examples.
	Triggers pulumi.ArrayInput
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update pulumi.StringPtrInput
}

func (MachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineArgs)(nil)).Elem()
}

type MachineInput interface {
	pulumi.Input

	ToMachineOutput() MachineOutput
	ToMachineOutputWithContext(ctx context.Context) MachineOutput
}

func (*Machine) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (i *Machine) ToMachineOutput() MachineOutput {
	return i.ToMachineOutputWithContext(context.Background())
}

func (i *Machine) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineOutput)
}

// MachineArrayInput is an input type that accepts MachineArray and MachineArrayOutput values.
// You can construct a concrete instance of `MachineArrayInput` via:
//
//	MachineArray{ MachineArgs{...} }
type MachineArrayInput interface {
	pulumi.Input

	ToMachineArrayOutput() MachineArrayOutput
	ToMachineArrayOutputWithContext(context.Context) MachineArrayOutput
}

type MachineArray []MachineInput

func (MachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Machine)(nil)).Elem()
}

func (i MachineArray) ToMachineArrayOutput() MachineArrayOutput {
	return i.ToMachineArrayOutputWithContext(context.Background())
}

func (i MachineArray) ToMachineArrayOutputWithContext(ctx context.Context) MachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineArrayOutput)
}

// MachineMapInput is an input type that accepts MachineMap and MachineMapOutput values.
// You can construct a concrete instance of `MachineMapInput` via:
//
//	MachineMap{ "key": MachineArgs{...} }
type MachineMapInput interface {
	pulumi.Input

	ToMachineMapOutput() MachineMapOutput
	ToMachineMapOutputWithContext(context.Context) MachineMapOutput
}

type MachineMap map[string]MachineInput

func (MachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Machine)(nil)).Elem()
}

func (i MachineMap) ToMachineMapOutput() MachineMapOutput {
	return i.ToMachineMapOutputWithContext(context.Background())
}

func (i MachineMap) ToMachineMapOutputWithContext(ctx context.Context) MachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineMapOutput)
}

type MachineOutput struct{ *pulumi.OutputState }

func (MachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (o MachineOutput) ToMachineOutput() MachineOutput {
	return o
}

func (o MachineOutput) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return o
}

// The action to take when the host starts. Valid values are Nothing, StartIfRunning, and Start. Defaults to Nothing.
func (o MachineOutput) AutoStartAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.AutoStartAction }).(pulumi.StringPtrOutput)
}

// The action to take when the host shuts down. Valid values are TurnOff, Save, and ShutDown. Defaults to TurnOff.
func (o MachineOutput) AutoStopAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.AutoStopAction }).(pulumi.StringPtrOutput)
}

// The command to run on create.
func (o MachineOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.Create }).(pulumi.StringPtrOutput)
}

// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
// Command resource from previous create or update steps.
func (o MachineOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.Delete }).(pulumi.StringPtrOutput)
}

// Whether to enable dynamic memory for the Virtual Machine. Defaults to false.
func (o MachineOutput) DynamicMemory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.BoolPtrOutput { return v.DynamicMemory }).(pulumi.BoolPtrOutput)
}

// Generation of the Virtual Machine. Defaults to 2.
func (o MachineOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntPtrOutput { return v.Generation }).(pulumi.IntPtrOutput)
}

// Hard drives to attach to the Virtual Machine.
func (o MachineOutput) HardDrives() HardDriveInputArrayOutput {
	return o.ApplyT(func(v *Machine) HardDriveInputArrayOutput { return v.HardDrives }).(HardDriveInputArrayOutput)
}

// Name of the Virtual Machine
func (o MachineOutput) MachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.MachineName }).(pulumi.StringPtrOutput)
}

// Maximum amount of memory that can be allocated to the Virtual Machine in MB when using dynamic memory.
func (o MachineOutput) MaximumMemory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntPtrOutput { return v.MaximumMemory }).(pulumi.IntPtrOutput)
}

// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
func (o MachineOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntPtrOutput { return v.MemorySize }).(pulumi.IntPtrOutput)
}

// Minimum amount of memory to allocate to the Virtual Machine in MB when using dynamic memory.
func (o MachineOutput) MinimumMemory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntPtrOutput { return v.MinimumMemory }).(pulumi.IntPtrOutput)
}

// Network adapters to attach to the Virtual Machine.
func (o MachineOutput) NetworkAdapters() networkadapter.NetworkAdapterInputsArrayOutput {
	return o.ApplyT(func(v *Machine) networkadapter.NetworkAdapterInputsArrayOutput { return v.NetworkAdapters }).(networkadapter.NetworkAdapterInputsArrayOutput)
}

// Number of processors to allocate to the Virtual Machine. Defaults to 1.
func (o MachineOutput) ProcessorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.IntPtrOutput { return v.ProcessorCount }).(pulumi.IntPtrOutput)
}

// Trigger a resource replacement on changes to any of these values. The
// trigger values can be of any type. If a value is different in the current update compared to the
// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
// Please see the resource documentation for examples.
func (o MachineOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Machine) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// The command to run on update, if empty, create will
// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
// are set to the stdout and stderr properties of the Command resource from previous
// create or update steps.
func (o MachineOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.Update }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type MachineArrayOutput struct{ *pulumi.OutputState }

func (MachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Machine)(nil)).Elem()
}

func (o MachineArrayOutput) ToMachineArrayOutput() MachineArrayOutput {
	return o
}

func (o MachineArrayOutput) ToMachineArrayOutputWithContext(ctx context.Context) MachineArrayOutput {
	return o
}

func (o MachineArrayOutput) Index(i pulumi.IntInput) MachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Machine {
		return vs[0].([]*Machine)[vs[1].(int)]
	}).(MachineOutput)
}

type MachineMapOutput struct{ *pulumi.OutputState }

func (MachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Machine)(nil)).Elem()
}

func (o MachineMapOutput) ToMachineMapOutput() MachineMapOutput {
	return o
}

func (o MachineMapOutput) ToMachineMapOutputWithContext(ctx context.Context) MachineMapOutput {
	return o
}

func (o MachineMapOutput) MapIndex(k pulumi.StringInput) MachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Machine {
		return vs[0].(map[string]*Machine)[vs[1].(string)]
	}).(MachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineInput)(nil)).Elem(), &Machine{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineArrayInput)(nil)).Elem(), MachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineMapInput)(nil)).Elem(), MachineMap{})
	pulumi.RegisterOutputType(MachineOutput{})
	pulumi.RegisterOutputType(MachineArrayOutput{})
	pulumi.RegisterOutputType(MachineMapOutput{})
}
