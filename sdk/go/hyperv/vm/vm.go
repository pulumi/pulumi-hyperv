// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-hyperv-provider/provider/go/hyperv/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// # Hyper-V Virtual Machine Management Service (VMMS)
//
// ## Overview
//
// The Virtual Machine Management Service (VMMS) is a core component of Hyper-V that manages virtual machine operations on a Windows Server or Windows Client system. This document provides information about the VMMS as implemented in the Pulumi Hyper-V provider.
//
// ## Features
//
// - Virtual machine lifecycle management (create, start, stop, pause, resume, delete)
// - Resource allocation and monitoring
// - Snapshot management
// - Virtual device configuration
//
// ## Implementation Details in Pulumi
//
// ### Virtual Machine Creation
//
// The `Create` method in the `vmController` is responsible for creating a virtual machine. It performs the following steps:
//
// 1. **Generate a Unique ID**: A unique ID is generated for the virtual machine.
// 2. **Default Values**:
//   - Memory size defaults to `1024 MB` if not specified.
//   - Processor count defaults to `1` if not specified.
//
// 3. **VMMS Client Initialization**: A VMMS client is created to interact with the Hyper-V host.
// 4. **Virtual Machine Settings**:
//   - The virtual machine is configured with `Hyper-V Generation 2`.
//   - Memory and processor settings are applied based on the provided or default values.
//
// 5. **Virtual Machine Creation**: The virtual machine is created using the configured settings.
//
// ### Read Method
//
// The `Read` method is a no-op in the current implementation. It does not perform any operations and always returns an empty state.
//
// ### Update Method
//
// The `Update` method:
//
// - Updates the virtual machine state if an `Update` command is provided.
// - Falls back to the `Create` command if no `Update` command is specified.
// - Does nothing if neither command is provided.
//
// ### Delete Method
//
// The `Delete` method is a no-op unless a `Delete` command is explicitly specified.
//
// ## Default Behavior
//
// - Outputs depend on all inputs by default.
// - No explicit dependency wiring is required.
//
// ## Usage in Pulumi
//
// When using the Pulumi Hyper-V provider, the VMMS is accessed indirectly through the `Vm` resource type. The resource supports the following properties:
//
// - `processorCount`: Number of processors to allocate (default: 1).
// - `memorySize`: Memory size in MB (default: 1024).
//
// ## Authentication and Security
//
// The VMMS requires appropriate permissions to manage Hyper-V objects. When using the Pulumi Hyper-V provider, ensure that:
//
// 1. The user running Pulumi commands has administrative privileges on the Hyper-V host.
// 2. Required firewall rules are configured if managing a remote Hyper-V host.
// 3. Proper credentials are provided when connecting to remote systems.
//
// ## Related Documentation
//
// - [Microsoft Hyper-V Documentation](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-on-windows-server)
// - [Pulumi Hyper-V Provider Documentation](https://www.pulumi.com/registry/packages/hyperv/
type Vm struct {
	pulumi.CustomResourceState

	// The command to run on create.
	Create pulumi.StringPtrOutput `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete pulumi.StringPtrOutput `pulumi:"delete"`
	// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
	MemorySize pulumi.IntPtrOutput `pulumi:"memorySize"`
	// Number of processors to allocate to the Virtual Machine. Defaults to 1.
	ProcessorCount pulumi.IntPtrOutput `pulumi:"processorCount"`
	// Trigger a resource replacement on changes to any of these values. The
	// trigger values can be of any type. If a value is different in the current update compared to the
	// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
	// Please see the resource documentation for examples.
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update pulumi.StringPtrOutput `pulumi:"update"`
	// Name of the Virtual Machine
	Vmname pulumi.StringOutput `pulumi:"vmname"`
}

// NewVm registers a new resource with the given unique name, arguments, and options.
func NewVm(ctx *pulumi.Context,
	name string, args *VmArgs, opts ...pulumi.ResourceOption) (*Vm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vmname == nil {
		return nil, errors.New("invalid value for required argument 'Vmname'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"triggers[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vm
	err := ctx.RegisterResource("hyperv:vm:Vm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVm gets an existing Vm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmState, opts ...pulumi.ResourceOption) (*Vm, error) {
	var resource Vm
	err := ctx.ReadResource("hyperv:vm:Vm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vm resources.
type vmState struct {
}

type VmState struct {
}

func (VmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmState)(nil)).Elem()
}

type vmArgs struct {
	// The command to run on create.
	Create *string `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *string `pulumi:"delete"`
	// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
	MemorySize *int `pulumi:"memorySize"`
	// Number of processors to allocate to the Virtual Machine. Defaults to 1.
	ProcessorCount *int `pulumi:"processorCount"`
	// Trigger a resource replacement on changes to any of these values. The
	// trigger values can be of any type. If a value is different in the current update compared to the
	// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
	// Please see the resource documentation for examples.
	Triggers []interface{} `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *string `pulumi:"update"`
	// Name of the Virtual Machine
	Vmname string `pulumi:"vmname"`
}

// The set of arguments for constructing a Vm resource.
type VmArgs struct {
	// The command to run on create.
	Create pulumi.StringPtrInput
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete pulumi.StringPtrInput
	// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
	MemorySize pulumi.IntPtrInput
	// Number of processors to allocate to the Virtual Machine. Defaults to 1.
	ProcessorCount pulumi.IntPtrInput
	// Trigger a resource replacement on changes to any of these values. The
	// trigger values can be of any type. If a value is different in the current update compared to the
	// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
	// Please see the resource documentation for examples.
	Triggers pulumi.ArrayInput
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update pulumi.StringPtrInput
	// Name of the Virtual Machine
	Vmname pulumi.StringInput
}

func (VmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmArgs)(nil)).Elem()
}

type VmInput interface {
	pulumi.Input

	ToVmOutput() VmOutput
	ToVmOutputWithContext(ctx context.Context) VmOutput
}

func (*Vm) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm)(nil)).Elem()
}

func (i *Vm) ToVmOutput() VmOutput {
	return i.ToVmOutputWithContext(context.Background())
}

func (i *Vm) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmOutput)
}

// VmArrayInput is an input type that accepts VmArray and VmArrayOutput values.
// You can construct a concrete instance of `VmArrayInput` via:
//
//	VmArray{ VmArgs{...} }
type VmArrayInput interface {
	pulumi.Input

	ToVmArrayOutput() VmArrayOutput
	ToVmArrayOutputWithContext(context.Context) VmArrayOutput
}

type VmArray []VmInput

func (VmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vm)(nil)).Elem()
}

func (i VmArray) ToVmArrayOutput() VmArrayOutput {
	return i.ToVmArrayOutputWithContext(context.Background())
}

func (i VmArray) ToVmArrayOutputWithContext(ctx context.Context) VmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmArrayOutput)
}

// VmMapInput is an input type that accepts VmMap and VmMapOutput values.
// You can construct a concrete instance of `VmMapInput` via:
//
//	VmMap{ "key": VmArgs{...} }
type VmMapInput interface {
	pulumi.Input

	ToVmMapOutput() VmMapOutput
	ToVmMapOutputWithContext(context.Context) VmMapOutput
}

type VmMap map[string]VmInput

func (VmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vm)(nil)).Elem()
}

func (i VmMap) ToVmMapOutput() VmMapOutput {
	return i.ToVmMapOutputWithContext(context.Background())
}

func (i VmMap) ToVmMapOutputWithContext(ctx context.Context) VmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmMapOutput)
}

type VmOutput struct{ *pulumi.OutputState }

func (VmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm)(nil)).Elem()
}

func (o VmOutput) ToVmOutput() VmOutput {
	return o
}

func (o VmOutput) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return o
}

// The command to run on create.
func (o VmOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.Create }).(pulumi.StringPtrOutput)
}

// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
// Command resource from previous create or update steps.
func (o VmOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.Delete }).(pulumi.StringPtrOutput)
}

// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
func (o VmOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntPtrOutput { return v.MemorySize }).(pulumi.IntPtrOutput)
}

// Number of processors to allocate to the Virtual Machine. Defaults to 1.
func (o VmOutput) ProcessorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntPtrOutput { return v.ProcessorCount }).(pulumi.IntPtrOutput)
}

// Trigger a resource replacement on changes to any of these values. The
// trigger values can be of any type. If a value is different in the current update compared to the
// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
// Please see the resource documentation for examples.
func (o VmOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Vm) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// The command to run on update, if empty, create will
// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
// are set to the stdout and stderr properties of the Command resource from previous
// create or update steps.
func (o VmOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.Update }).(pulumi.StringPtrOutput)
}

// Name of the Virtual Machine
func (o VmOutput) Vmname() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Vmname }).(pulumi.StringOutput)
}

type VmArrayOutput struct{ *pulumi.OutputState }

func (VmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vm)(nil)).Elem()
}

func (o VmArrayOutput) ToVmArrayOutput() VmArrayOutput {
	return o
}

func (o VmArrayOutput) ToVmArrayOutputWithContext(ctx context.Context) VmArrayOutput {
	return o
}

func (o VmArrayOutput) Index(i pulumi.IntInput) VmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vm {
		return vs[0].([]*Vm)[vs[1].(int)]
	}).(VmOutput)
}

type VmMapOutput struct{ *pulumi.OutputState }

func (VmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vm)(nil)).Elem()
}

func (o VmMapOutput) ToVmMapOutput() VmMapOutput {
	return o
}

func (o VmMapOutput) ToVmMapOutputWithContext(ctx context.Context) VmMapOutput {
	return o
}

func (o VmMapOutput) MapIndex(k pulumi.StringInput) VmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vm {
		return vs[0].(map[string]*Vm)[vs[1].(string)]
	}).(VmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmInput)(nil)).Elem(), &Vm{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmArrayInput)(nil)).Elem(), VmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmMapInput)(nil)).Elem(), VmMap{})
	pulumi.RegisterOutputType(VmOutput{})
	pulumi.RegisterOutputType(VmArrayOutput{})
	pulumi.RegisterOutputType(VmMapOutput{})
}
