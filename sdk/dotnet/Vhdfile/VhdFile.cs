// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Hyperv.Vhdfile
{
    /// <summary>
    /// # VHD File Resource Management
    /// 
    /// The `vhdfile` package provides utilities for managing VHD (Virtual Hard Disk) files for Hyper-V virtual machines.
    /// 
    /// ## Overview
    /// 
    /// This package enables creating, modifying, and deleting VHD and VHDX files through the Pulumi Hyper-V provider. It provides a clean abstraction for working with virtual disk files independent of virtual machines.
    /// 
    /// ## Key Components
    /// 
    /// ### Types
    /// 
    /// - **VhdFile**: Represents a VHD or VHDX file for use with Hyper-V virtual machines.
    /// 
    /// ### Resource Lifecycle Methods
    /// 
    /// - **Create**: Creates a new VHD/VHDX file with specified properties.
    /// - **Read**: Retrieves information about an existing VHD/VHDX file.
    /// - **Update**: Modifies properties of an existing VHD/VHDX file (currently a no-op in the implementation).
    /// - **Delete**: Removes a VHD/VHDX file.
    /// 
    /// ## Available Properties
    /// 
    /// The VhdFile resource supports the following properties:
    /// 
    /// | Property | Type | Description |
    /// |----------|------|-------------|
    /// | `path` | string | Path where the VHD file should be created |
    /// | `parentPath` | string | Path to parent VHD when creating differencing disks |
    /// | `diskType` | string | Type of disk (Fixed, Dynamic, Differencing) |
    /// | `sizeBytes` | number | Size of the disk in bytes (for Fixed and Dynamic disks) |
    /// | `blockSize` | number | Block size of the disk in bytes (recommended: 1048576 for 1MB) |
    /// 
    /// ## Implementation Details
    /// 
    /// The package uses PowerShell commands under the hood to interact with Hyper-V's VHD management functionality, providing a Go-based interface that integrates with the Pulumi resource model.
    /// 
    /// ### Update Behavior
    /// 
    /// The current implementation of the `Update` method is a no-op. Any changes to VHD properties that require modification of the underlying file structure will typically require replacing the resource rather than updating it in place.
    /// 
    /// ## Usage Examples
    /// 
    /// VHD files can be defined and managed through the Pulumi Hyper-V provider using the standard resource model. These virtual disks can then be attached to virtual machines or managed independently.
    /// 
    /// ### Creating a Base VHD
    /// 
    /// ### Creating a Differencing Disk
    /// 
    /// ### Using with Machine Resource
    /// 
    /// The VhdFile resource can be used in conjunction with the Machine resource by attaching the VHD files to a virtual machine using the `hardDrives` array:
    /// </summary>
    [HypervResourceType("hyperv:vhdfile:VhdFile")]
    public partial class VhdFile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Block size of the VHD file in bytes. Recommended value is 1MB (1048576 bytes) for better compatibility.
        /// </summary>
        [Output("blockSize")]
        public Output<int?> BlockSize { get; private set; } = null!;

        /// <summary>
        /// The command to run on create.
        /// </summary>
        [Output("create")]
        public Output<string?> Create { get; private set; } = null!;

        /// <summary>
        /// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        /// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        /// Command resource from previous create or update steps.
        /// </summary>
        [Output("delete")]
        public Output<string?> Delete { get; private set; } = null!;

        /// <summary>
        /// Type of the VHD file (Fixed, Dynamic, or Differencing)
        /// </summary>
        [Output("diskType")]
        public Output<string?> DiskType { get; private set; } = null!;

        /// <summary>
        /// Path to the parent VHD file when creating a differencing disk
        /// </summary>
        [Output("parentPath")]
        public Output<string?> ParentPath { get; private set; } = null!;

        /// <summary>
        /// Path to the VHD file
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Size of the VHD file in bytes
        /// </summary>
        [Output("sizeBytes")]
        public Output<int?> SizeBytes { get; private set; } = null!;

        /// <summary>
        /// Trigger a resource replacement on changes to any of these values. The
        /// trigger values can be of any type. If a value is different in the current update compared to the
        /// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        /// Please see the resource documentation for examples.
        /// </summary>
        [Output("triggers")]
        public Output<ImmutableArray<object>> Triggers { get; private set; } = null!;

        /// <summary>
        /// The command to run on update, if empty, create will 
        /// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        /// are set to the stdout and stderr properties of the Command resource from previous 
        /// create or update steps.
        /// </summary>
        [Output("update")]
        public Output<string?> Update { get; private set; } = null!;


        /// <summary>
        /// Create a VhdFile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VhdFile(string name, VhdFileArgs args, CustomResourceOptions? options = null)
            : base("hyperv:vhdfile:VhdFile", name, args ?? new VhdFileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VhdFile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("hyperv:vhdfile:VhdFile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "triggers[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VhdFile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VhdFile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VhdFile(name, id, options);
        }
    }

    public sealed class VhdFileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Block size of the VHD file in bytes. Recommended value is 1MB (1048576 bytes) for better compatibility.
        /// </summary>
        [Input("blockSize")]
        public Input<int>? BlockSize { get; set; }

        /// <summary>
        /// The command to run on create.
        /// </summary>
        [Input("create")]
        public Input<string>? Create { get; set; }

        /// <summary>
        /// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        /// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        /// Command resource from previous create or update steps.
        /// </summary>
        [Input("delete")]
        public Input<string>? Delete { get; set; }

        /// <summary>
        /// Type of the VHD file (Fixed, Dynamic, or Differencing)
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        /// <summary>
        /// Path to the parent VHD file when creating a differencing disk
        /// </summary>
        [Input("parentPath")]
        public Input<string>? ParentPath { get; set; }

        /// <summary>
        /// Path to the VHD file
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Size of the VHD file in bytes
        /// </summary>
        [Input("sizeBytes")]
        public Input<int>? SizeBytes { get; set; }

        [Input("triggers")]
        private InputList<object>? _triggers;

        /// <summary>
        /// Trigger a resource replacement on changes to any of these values. The
        /// trigger values can be of any type. If a value is different in the current update compared to the
        /// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        /// Please see the resource documentation for examples.
        /// </summary>
        public InputList<object> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<object>());
            set => _triggers = value;
        }

        /// <summary>
        /// The command to run on update, if empty, create will 
        /// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        /// are set to the stdout and stderr properties of the Command resource from previous 
        /// create or update steps.
        /// </summary>
        [Input("update")]
        public Input<string>? Update { get; set; }

        public VhdFileArgs()
        {
        }
        public static new VhdFileArgs Empty => new VhdFileArgs();
    }
}
