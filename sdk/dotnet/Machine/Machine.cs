// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Hyperv.Machine
{
    /// <summary>
    /// # Hyper-V Machine Resource
    /// 
    /// ## Overview
    /// 
    /// The Machine resource in the Pulumi Hyper-V provider allows you to create, manage, and delete virtual machines on a Hyper-V host. This resource interacts with the Virtual Machine Management Service (VMMS) to perform virtual machine operations.
    /// 
    /// ## Features
    /// 
    /// - Create and delete Hyper-V virtual machines
    /// - Configure VM hardware properties including:
    ///   - Memory allocation
    ///   - Processor count
    ///   - VM generation (Gen 1 or Gen 2)
    /// - Unique VM identification with automatic ID generation
    /// 
    /// ## Implementation Details
    /// 
    /// ### Resource Structure
    /// 
    /// The Machine resource implementation consists of multiple files:
    /// - `machine.go` - Core resource type definition, input/output models, and annotations
    /// - `machineController.go` - Implementation of CRUD operations
    /// - `machineOutputs.go` - Output-specific methods
    /// 
    /// ### Virtual Machine Creation
    /// 
    /// The `Create` method performs the following steps:
    /// 
    /// 1. **Initialize Connection**: Establishes a connection to the Hyper-V host using WMI
    /// 2. **Configure VM Settings**:
    ///    - Sets the virtual machine generation (defaults to Generation 2)
    ///    - Configures memory settings (defaults to 1024 MB)
    ///    - Sets processor count (defaults to 1 vCPU)
    /// 3. **Create VM**: Calls the Hyper-V API to create a new virtual machine with the specified settings
    /// 
    /// ### Virtual Machine Read
    /// 
    /// The `Read` method retrieves the current state of a virtual machine by:
    /// 1. Connecting to the Hyper-V host
    /// 2. Getting the VM by name
    /// 3. Retrieving VM properties including:
    ///    - VM ID
    ///    - Memory settings
    ///    - Processor configuration
    ///    - Generation
    /// 
    /// ### Virtual Machine Update
    /// 
    /// The `Update` method currently provides a minimal implementation that preserves the VM's state while updating its metadata.
    /// 
    /// ### Virtual Machine Delete
    /// 
    /// The `Delete` method:
    /// 1. Connects to the Hyper-V host
    /// 2. Gets the virtual machine by name
    /// 3. Starts the VM (to ensure it's in a state that can be properly deleted)
    /// 4. Gracefully stops the VM
    /// 5. Deletes the virtual machine
    /// 
    /// ## Available Properties
    /// 
    /// | Property | Type | Description | Default |
    /// |----------|------|-------------|---------|
    /// | `machineName` | string | Name of the Virtual Machine | (required) |
    /// | `generation` | int | Generation of the Virtual Machine (1 or 2) | 2 |
    /// | `processorCount` | int | Number of processors to allocate | 1 |
    /// | `memorySize` | int | Memory size in MB | 1024 |
    /// | `triggers` | array | Values that trigger resource replacement when changed | (optional) |
    /// 
    /// ## Future Extensions
    /// 
    /// The code includes scaffolding for future enhancements including:
    /// - Network adapter configuration
    /// - Hard drive attachments
    /// - Key protector for secure boot
    /// - Additional system settings
    /// 
    /// ## Related Documentation
    /// 
    /// - [Microsoft Hyper-V Documentation](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-on-windows-server)
    /// - [Pulumi Hyper-V Provider Documentation](https://www.pulumi.com/registry/packages/hyperv/)
    /// </summary>
    [HypervResourceType("hyperv:machine:Machine")]
    public partial class Machine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The command to run on create.
        /// </summary>
        [Output("create")]
        public Output<string?> Create { get; private set; } = null!;

        /// <summary>
        /// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        /// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        /// Command resource from previous create or update steps.
        /// </summary>
        [Output("delete")]
        public Output<string?> Delete { get; private set; } = null!;

        /// <summary>
        /// Generation of the Virtual Machine. Defaults to 2.
        /// </summary>
        [Output("generation")]
        public Output<int?> Generation { get; private set; } = null!;

        /// <summary>
        /// Name of the Virtual Machine
        /// </summary>
        [Output("machineName")]
        public Output<string?> MachineName { get; private set; } = null!;

        /// <summary>
        /// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
        /// </summary>
        [Output("memorySize")]
        public Output<int?> MemorySize { get; private set; } = null!;

        /// <summary>
        /// Number of processors to allocate to the Virtual Machine. Defaults to 1.
        /// </summary>
        [Output("processorCount")]
        public Output<int?> ProcessorCount { get; private set; } = null!;

        /// <summary>
        /// Trigger a resource replacement on changes to any of these values. The
        /// trigger values can be of any type. If a value is different in the current update compared to the
        /// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        /// Please see the resource documentation for examples.
        /// </summary>
        [Output("triggers")]
        public Output<ImmutableArray<object>> Triggers { get; private set; } = null!;

        /// <summary>
        /// The command to run on update, if empty, create will 
        /// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        /// are set to the stdout and stderr properties of the Command resource from previous 
        /// create or update steps.
        /// </summary>
        [Output("update")]
        public Output<string?> Update { get; private set; } = null!;

        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a Machine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Machine(string name, MachineArgs? args = null, CustomResourceOptions? options = null)
            : base("hyperv:machine:Machine", name, args ?? new MachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Machine(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("hyperv:machine:Machine", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "triggers[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Machine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Machine Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Machine(name, id, options);
        }
    }

    public sealed class MachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The command to run on create.
        /// </summary>
        [Input("create")]
        public Input<string>? Create { get; set; }

        /// <summary>
        /// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        /// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        /// Command resource from previous create or update steps.
        /// </summary>
        [Input("delete")]
        public Input<string>? Delete { get; set; }

        /// <summary>
        /// Generation of the Virtual Machine. Defaults to 2.
        /// </summary>
        [Input("generation")]
        public Input<int>? Generation { get; set; }

        /// <summary>
        /// Name of the Virtual Machine
        /// </summary>
        [Input("machineName")]
        public Input<string>? MachineName { get; set; }

        /// <summary>
        /// Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// Number of processors to allocate to the Virtual Machine. Defaults to 1.
        /// </summary>
        [Input("processorCount")]
        public Input<int>? ProcessorCount { get; set; }

        [Input("triggers")]
        private InputList<object>? _triggers;

        /// <summary>
        /// Trigger a resource replacement on changes to any of these values. The
        /// trigger values can be of any type. If a value is different in the current update compared to the
        /// previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        /// Please see the resource documentation for examples.
        /// </summary>
        public InputList<object> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<object>());
            set => _triggers = value;
        }

        /// <summary>
        /// The command to run on update, if empty, create will 
        /// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        /// are set to the stdout and stderr properties of the Command resource from previous 
        /// create or update steps.
        /// </summary>
        [Input("update")]
        public Input<string>? Update { get; set; }

        public MachineArgs()
        {
        }
        public static new MachineArgs Empty => new MachineArgs();
    }
}
