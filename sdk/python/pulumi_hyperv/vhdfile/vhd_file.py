# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VhdFileArgs', 'VhdFile']

@pulumi.input_type
class VhdFileArgs:
    def __init__(__self__, *,
                 disk_type: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 size_bytes: pulumi.Input[builtins.int],
                 block_size: Optional[pulumi.Input[builtins.int]] = None,
                 create: Optional[pulumi.Input[builtins.str]] = None,
                 delete: Optional[pulumi.Input[builtins.str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 update: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a VhdFile resource.
        :param pulumi.Input[builtins.str] disk_type: Type of the VHD file (fixed or dynamic)
        :param pulumi.Input[builtins.str] path: Path to the VHD file
        :param pulumi.Input[builtins.int] size_bytes: Size of the VHD file in bytes
        :param pulumi.Input[builtins.int] block_size: Block size of the VHD file in bytes
        :param pulumi.Input[builtins.str] create: The command to run on create.
        :param pulumi.Input[builtins.str] delete: The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
               and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
               Command resource from previous create or update steps.
        :param pulumi.Input[Sequence[Any]] triggers: Trigger a resource replacement on changes to any of these values. The
               trigger values can be of any type. If a value is different in the current update compared to the
               previous update, the resource will be replaced, i.e., the "create" command will be re-run.
               Please see the resource documentation for examples.
        :param pulumi.Input[builtins.str] update: The command to run on update, if empty, create will 
               run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
               are set to the stdout and stderr properties of the Command resource from previous 
               create or update steps.
        """
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size_bytes", size_bytes)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the VHD file (fixed or dynamic)
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        Path to the VHD file
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> pulumi.Input[builtins.int]:
        """
        Size of the VHD file in bytes
        """
        return pulumi.get(self, "size_bytes")

    @size_bytes.setter
    def size_bytes(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "size_bytes", value)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Block size of the VHD file in bytes
        """
        return pulumi.get(self, "block_size")

    @block_size.setter
    def block_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "block_size", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The command to run on create.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        Command resource from previous create or update steps.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Trigger a resource replacement on changes to any of these values. The
        trigger values can be of any type. If a value is different in the current update compared to the
        previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        Please see the resource documentation for examples.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The command to run on update, if empty, create will 
        run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        are set to the stdout and stderr properties of the Command resource from previous 
        create or update steps.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update", value)


class VhdFile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_size: Optional[pulumi.Input[builtins.int]] = None,
                 create: Optional[pulumi.Input[builtins.str]] = None,
                 delete: Optional[pulumi.Input[builtins.str]] = None,
                 disk_type: Optional[pulumi.Input[builtins.str]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None,
                 size_bytes: Optional[pulumi.Input[builtins.int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 update: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        # VHD File Resource Management

        The `vhdfile` package provides utilities for managing VHD (Virtual Hard Disk) files for Hyper-V virtual machines.

        ## Overview

        This package enables creating, modifying, and deleting VHD and VHDX files through the Pulumi Hyper-V provider. It provides a clean abstraction for working with virtual disk files independent of virtual machines.

        ## Key Components

        ### Types

        - **VhdFile**: Represents a VHD or VHDX file for use with Hyper-V virtual machines.

        ### Resource Lifecycle Methods

        - **Create**: Creates a new VHD/VHDX file with specified properties.
        - **Read**: Retrieves information about an existing VHD/VHDX file.
        - **Update**: Modifies properties of an existing VHD/VHDX file (currently a no-op in the implementation).
        - **Delete**: Removes a VHD/VHDX file.

        ## Available Properties

        The VhdFile resource supports the following properties:

        | Property | Type | Description |
        |----------|------|-------------|
        | `path` | string | Path where the VHD file should be created |
        | `parentPath` | string | Path to parent VHD when creating differencing disks |
        | `diskType` | string | Type of disk (Fixed, Dynamic, Differencing) |
        | `sizeBytes` | number | Size of the disk in bytes (for Fixed and Dynamic disks) |

        ## Implementation Details

        The package uses PowerShell commands under the hood to interact with Hyper-V's VHD management functionality, providing a Go-based interface that integrates with the Pulumi resource model.

        ### Update Behavior

        The current implementation of the `Update` method is a no-op. Any changes to VHD properties that require modification of the underlying file structure will typically require replacing the resource rather than updating it in place.

        ## Usage Examples

        VHD files can be defined and managed through the Pulumi Hyper-V provider using the standard resource model. These virtual disks can then be attached to virtual machines or managed independently.

        ### Creating a Differencing Disk

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] block_size: Block size of the VHD file in bytes
        :param pulumi.Input[builtins.str] create: The command to run on create.
        :param pulumi.Input[builtins.str] delete: The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
               and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
               Command resource from previous create or update steps.
        :param pulumi.Input[builtins.str] disk_type: Type of the VHD file (fixed or dynamic)
        :param pulumi.Input[builtins.str] path: Path to the VHD file
        :param pulumi.Input[builtins.int] size_bytes: Size of the VHD file in bytes
        :param pulumi.Input[Sequence[Any]] triggers: Trigger a resource replacement on changes to any of these values. The
               trigger values can be of any type. If a value is different in the current update compared to the
               previous update, the resource will be replaced, i.e., the "create" command will be re-run.
               Please see the resource documentation for examples.
        :param pulumi.Input[builtins.str] update: The command to run on update, if empty, create will 
               run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
               are set to the stdout and stderr properties of the Command resource from previous 
               create or update steps.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VhdFileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        # VHD File Resource Management

        The `vhdfile` package provides utilities for managing VHD (Virtual Hard Disk) files for Hyper-V virtual machines.

        ## Overview

        This package enables creating, modifying, and deleting VHD and VHDX files through the Pulumi Hyper-V provider. It provides a clean abstraction for working with virtual disk files independent of virtual machines.

        ## Key Components

        ### Types

        - **VhdFile**: Represents a VHD or VHDX file for use with Hyper-V virtual machines.

        ### Resource Lifecycle Methods

        - **Create**: Creates a new VHD/VHDX file with specified properties.
        - **Read**: Retrieves information about an existing VHD/VHDX file.
        - **Update**: Modifies properties of an existing VHD/VHDX file (currently a no-op in the implementation).
        - **Delete**: Removes a VHD/VHDX file.

        ## Available Properties

        The VhdFile resource supports the following properties:

        | Property | Type | Description |
        |----------|------|-------------|
        | `path` | string | Path where the VHD file should be created |
        | `parentPath` | string | Path to parent VHD when creating differencing disks |
        | `diskType` | string | Type of disk (Fixed, Dynamic, Differencing) |
        | `sizeBytes` | number | Size of the disk in bytes (for Fixed and Dynamic disks) |

        ## Implementation Details

        The package uses PowerShell commands under the hood to interact with Hyper-V's VHD management functionality, providing a Go-based interface that integrates with the Pulumi resource model.

        ### Update Behavior

        The current implementation of the `Update` method is a no-op. Any changes to VHD properties that require modification of the underlying file structure will typically require replacing the resource rather than updating it in place.

        ## Usage Examples

        VHD files can be defined and managed through the Pulumi Hyper-V provider using the standard resource model. These virtual disks can then be attached to virtual machines or managed independently.

        ### Creating a Differencing Disk

        :param str resource_name: The name of the resource.
        :param VhdFileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VhdFileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_size: Optional[pulumi.Input[builtins.int]] = None,
                 create: Optional[pulumi.Input[builtins.str]] = None,
                 delete: Optional[pulumi.Input[builtins.str]] = None,
                 disk_type: Optional[pulumi.Input[builtins.str]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None,
                 size_bytes: Optional[pulumi.Input[builtins.int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 update: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VhdFileArgs.__new__(VhdFileArgs)

            __props__.__dict__["block_size"] = block_size
            __props__.__dict__["create"] = create
            __props__.__dict__["delete"] = delete
            if disk_type is None and not opts.urn:
                raise TypeError("Missing required property 'disk_type'")
            __props__.__dict__["disk_type"] = disk_type
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if size_bytes is None and not opts.urn:
                raise TypeError("Missing required property 'size_bytes'")
            __props__.__dict__["size_bytes"] = size_bytes
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["update"] = update
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["triggers[*]"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(VhdFile, __self__).__init__(
            'hyperv:vhdfile:VhdFile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VhdFile':
        """
        Get an existing VhdFile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VhdFileArgs.__new__(VhdFileArgs)

        __props__.__dict__["block_size"] = None
        __props__.__dict__["create"] = None
        __props__.__dict__["delete"] = None
        __props__.__dict__["disk_type"] = None
        __props__.__dict__["path"] = None
        __props__.__dict__["size_bytes"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["update"] = None
        return VhdFile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Block size of the VHD file in bytes
        """
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def create(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The command to run on create.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        Command resource from previous create or update steps.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Output[builtins.str]:
        """
        Type of the VHD file (fixed or dynamic)
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[builtins.str]:
        """
        Path to the VHD file
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> pulumi.Output[builtins.int]:
        """
        Size of the VHD file in bytes
        """
        return pulumi.get(self, "size_bytes")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        Trigger a resource replacement on changes to any of these values. The
        trigger values can be of any type. If a value is different in the current update compared to the
        previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        Please see the resource documentation for examples.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def update(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The command to run on update, if empty, create will 
        run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        are set to the stdout and stderr properties of the Command resource from previous 
        create or update steps.
        """
        return pulumi.get(self, "update")

