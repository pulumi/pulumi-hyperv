# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'NetworkAdapterInputs',
]

@pulumi.output_type
class NetworkAdapterInputs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "switchName":
            suggest = "switch_name"
        elif key == "dhcpGuard":
            suggest = "dhcp_guard"
        elif key == "ieeePriorityTag":
            suggest = "ieee_priority_tag"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "portMirroring":
            suggest = "port_mirroring"
        elif key == "routerGuard":
            suggest = "router_guard"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vmName":
            suggest = "vm_name"
        elif key == "vmqWeight":
            suggest = "vmq_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkAdapterInputs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkAdapterInputs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkAdapterInputs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 switch_name: builtins.str,
                 create: Optional[builtins.str] = None,
                 delete: Optional[builtins.str] = None,
                 dhcp_guard: Optional[builtins.bool] = None,
                 ieee_priority_tag: Optional[builtins.bool] = None,
                 ip_addresses: Optional[builtins.str] = None,
                 mac_address: Optional[builtins.str] = None,
                 port_mirroring: Optional[builtins.str] = None,
                 router_guard: Optional[builtins.bool] = None,
                 triggers: Optional[Sequence[Any]] = None,
                 update: Optional[builtins.str] = None,
                 vlan_id: Optional[builtins.int] = None,
                 vm_name: Optional[builtins.str] = None,
                 vmq_weight: Optional[builtins.int] = None):
        """
        :param builtins.str name: Name of the network adapter
        :param builtins.str switch_name: Name of the virtual switch to connect the network adapter to
        :param builtins.str create: The command to run on create.
        :param builtins.str delete: The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
               and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
               Command resource from previous create or update steps.
        :param builtins.bool dhcp_guard: Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
        :param builtins.bool ieee_priority_tag: Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
        :param builtins.str ip_addresses: Comma-separated list of IP addresses to assign to the network adapter.
        :param builtins.str mac_address: MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
        :param builtins.str port_mirroring: Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
        :param builtins.bool router_guard: Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
        :param Sequence[Any] triggers: Trigger a resource replacement on changes to any of these values. The
               trigger values can be of any type. If a value is different in the current update compared to the
               previous update, the resource will be replaced, i.e., the "create" command will be re-run.
               Please see the resource documentation for examples.
        :param builtins.str update: The command to run on update, if empty, create will 
               run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
               are set to the stdout and stderr properties of the Command resource from previous 
               create or update steps.
        :param builtins.int vlan_id: VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
        :param builtins.str vm_name: Name of the virtual machine to attach the network adapter to
        :param builtins.int vmq_weight: VMQ weight for the network adapter. A value of 0 disables VMQ.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "switch_name", switch_name)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if dhcp_guard is not None:
            pulumi.set(__self__, "dhcp_guard", dhcp_guard)
        if ieee_priority_tag is not None:
            pulumi.set(__self__, "ieee_priority_tag", ieee_priority_tag)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if router_guard is not None:
            pulumi.set(__self__, "router_guard", router_guard)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if update is not None:
            pulumi.set(__self__, "update", update)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)
        if vmq_weight is not None:
            pulumi.set(__self__, "vmq_weight", vmq_weight)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the network adapter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="switchName")
    def switch_name(self) -> builtins.str:
        """
        Name of the virtual switch to connect the network adapter to
        """
        return pulumi.get(self, "switch_name")

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        The command to run on create.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[builtins.str]:
        """
        The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
        and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
        Command resource from previous create or update steps.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter(name="dhcpGuard")
    def dhcp_guard(self) -> Optional[builtins.bool]:
        """
        Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
        """
        return pulumi.get(self, "dhcp_guard")

    @property
    @pulumi.getter(name="ieeePriorityTag")
    def ieee_priority_tag(self) -> Optional[builtins.bool]:
        """
        Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
        """
        return pulumi.get(self, "ieee_priority_tag")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[builtins.str]:
        """
        Comma-separated list of IP addresses to assign to the network adapter.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[builtins.str]:
        """
        MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[builtins.str]:
        """
        Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
        """
        return pulumi.get(self, "port_mirroring")

    @property
    @pulumi.getter(name="routerGuard")
    def router_guard(self) -> Optional[builtins.bool]:
        """
        Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
        """
        return pulumi.get(self, "router_guard")

    @property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence[Any]]:
        """
        Trigger a resource replacement on changes to any of these values. The
        trigger values can be of any type. If a value is different in the current update compared to the
        previous update, the resource will be replaced, i.e., the "create" command will be re-run.
        Please see the resource documentation for examples.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def update(self) -> Optional[builtins.str]:
        """
        The command to run on update, if empty, create will 
        run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
        are set to the stdout and stderr properties of the Command resource from previous 
        create or update steps.
        """
        return pulumi.get(self, "update")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[builtins.int]:
        """
        VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[builtins.str]:
        """
        Name of the virtual machine to attach the network adapter to
        """
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter(name="vmqWeight")
    def vmq_weight(self) -> Optional[builtins.int]:
        """
        VMQ weight for the network adapter. A value of 0 disables VMQ.
        """
        return pulumi.get(self, "vmq_weight")


