// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * # VHD File Resource Management
 *
 * The `vhdfile` package provides utilities for managing VHD (Virtual Hard Disk) files for Hyper-V virtual machines.
 *
 * ## Overview
 *
 * This package enables creating, modifying, and deleting VHD and VHDX files through the Pulumi Hyper-V provider. It provides a clean abstraction for working with virtual disk files independent of virtual machines.
 *
 * ## Key Components
 *
 * ### Types
 *
 * - **VhdFile**: Represents a VHD or VHDX file for use with Hyper-V virtual machines.
 *
 * ### Resource Lifecycle Methods
 *
 * - **Create**: Creates a new VHD/VHDX file with specified properties.
 * - **Read**: Retrieves information about an existing VHD/VHDX file.
 * - **Update**: Modifies properties of an existing VHD/VHDX file (currently a no-op in the implementation).
 * - **Delete**: Removes a VHD/VHDX file.
 *
 * ## Available Properties
 *
 * The VhdFile resource supports the following properties:
 *
 * | Property | Type | Description |
 * |----------|------|-------------|
 * | `path` | string | Path where the VHD file should be created |
 * | `parentPath` | string | Path to parent VHD when creating differencing disks |
 * | `diskType` | string | Type of disk (Fixed, Dynamic, Differencing) |
 * | `sizeBytes` | number | Size of the disk in bytes (for Fixed and Dynamic disks) |
 *
 * ## Implementation Details
 *
 * The package uses PowerShell commands under the hood to interact with Hyper-V's VHD management functionality, providing a Go-based interface that integrates with the Pulumi resource model.
 *
 * ### Update Behavior
 *
 * The current implementation of the `Update` method is a no-op. Any changes to VHD properties that require modification of the underlying file structure will typically require replacing the resource rather than updating it in place.
 *
 * ## Usage Examples
 *
 * VHD files can be defined and managed through the Pulumi Hyper-V provider using the standard resource model. These virtual disks can then be attached to virtual machines or managed independently.
 *
 * ### Creating a Differencing Disk
 *
 * ```typescript
 * const baseVhd = new hyperv.VhdFile("base-vhd", {
 *     path: "c:\\vms\\base\\disk.vhdx",
 *     sizeBytes: 40 * 1024 * 1024 * 1024, // 40GB
 *     diskType: "Dynamic"
 * });
 * ```
 */
export class VhdFile extends pulumi.CustomResource {
    /**
     * Get an existing VhdFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VhdFile {
        return new VhdFile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hyperv:vhdfile:VhdFile';

    /**
     * Returns true if the given object is an instance of VhdFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VhdFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VhdFile.__pulumiType;
    }

    /**
     * Block size of the VHD file in bytes
     */
    public readonly blockSize!: pulumi.Output<number | undefined>;
    /**
     * The command to run on create.
     */
    public readonly create!: pulumi.Output<string | undefined>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    public readonly delete!: pulumi.Output<string | undefined>;
    /**
     * Type of the VHD file (fixed or dynamic)
     */
    public readonly diskType!: pulumi.Output<string>;
    /**
     * Path to the VHD file
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Size of the VHD file in bytes
     */
    public readonly sizeBytes!: pulumi.Output<number>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    public readonly update!: pulumi.Output<string | undefined>;

    /**
     * Create a VhdFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VhdFileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.diskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskType'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.sizeBytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeBytes'");
            }
            resourceInputs["blockSize"] = args ? args.blockSize : undefined;
            resourceInputs["create"] = args ? args.create : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["sizeBytes"] = args ? args.sizeBytes : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
        } else {
            resourceInputs["blockSize"] = undefined /*out*/;
            resourceInputs["create"] = undefined /*out*/;
            resourceInputs["delete"] = undefined /*out*/;
            resourceInputs["diskType"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["update"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["triggers[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VhdFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VhdFile resource.
 */
export interface VhdFileArgs {
    /**
     * Block size of the VHD file in bytes
     */
    blockSize?: pulumi.Input<number>;
    /**
     * The command to run on create.
     */
    create?: pulumi.Input<string>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    delete?: pulumi.Input<string>;
    /**
     * Type of the VHD file (fixed or dynamic)
     */
    diskType: pulumi.Input<string>;
    /**
     * Path to the VHD file
     */
    path: pulumi.Input<string>;
    /**
     * Size of the VHD file in bytes
     */
    sizeBytes: pulumi.Input<number>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    update?: pulumi.Input<string>;
}
