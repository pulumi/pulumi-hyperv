// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * # Hyper-V Virtual Machine Management Service (VMMS)
 *
 * ## Overview
 *
 * The Virtual Machine Management Service (VMMS) is a core component of Hyper-V that manages virtual machine operations on a Windows Server or Windows Client system. This document provides information about the VMMS as implemented in the Pulumi Hyper-V provider.
 *
 * ## Features
 *
 * - Virtual machine lifecycle management (create, start, stop, pause, resume, delete)
 * - Resource allocation and monitoring
 * - Snapshot management
 * - Virtual device configuration
 *
 * ## Implementation Details in Pulumi
 *
 * ### Virtual Machine Creation
 *
 * The `Create` method in the `vmController` is responsible for creating a virtual machine. It performs the following steps:
 *
 * 1. **Generate a Unique ID**: A unique ID is generated for the virtual machine.
 * 2. **Default Values**:
 *    - Memory size defaults to `1024 MB` if not specified.
 *    - Processor count defaults to `1` if not specified.
 * 3. **VMMS Client Initialization**: A VMMS client is created to interact with the Hyper-V host.
 * 4. **Virtual Machine Settings**:
 *    - The virtual machine is configured with `Hyper-V Generation 2`.
 *    - Memory and processor settings are applied based on the provided or default values.
 * 5. **Virtual Machine Creation**: The virtual machine is created using the configured settings.
 *
 * ### Read Method
 *
 * The `Read` method is a no-op in the current implementation. It does not perform any operations and always returns an empty state.
 *
 * ### Update Method
 *
 * The `Update` method:
 *
 * - Updates the virtual machine state if an `Update` command is provided.
 * - Falls back to the `Create` command if no `Update` command is specified.
 * - Does nothing if neither command is provided.
 *
 * ### Delete Method
 *
 * The `Delete` method is a no-op unless a `Delete` command is explicitly specified.
 *
 * ## Default Behavior
 *
 * - Outputs depend on all inputs by default.
 * - No explicit dependency wiring is required.
 *
 * ## Usage in Pulumi
 *
 * When using the Pulumi Hyper-V provider, the VMMS is accessed indirectly through the `Vm` resource type. The resource supports the following properties:
 *
 * - `processorCount`: Number of processors to allocate (default: 1).
 * - `memorySize`: Memory size in MB (default: 1024).
 *
 * ## Authentication and Security
 *
 * The VMMS requires appropriate permissions to manage Hyper-V objects. When using the Pulumi Hyper-V provider, ensure that:
 *
 * 1. The user running Pulumi commands has administrative privileges on the Hyper-V host.
 * 2. Required firewall rules are configured if managing a remote Hyper-V host.
 * 3. Proper credentials are provided when connecting to remote systems.
 *
 * ## Related Documentation
 *
 * - [Microsoft Hyper-V Documentation](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-on-windows-server)
 * - [Pulumi Hyper-V Provider Documentation](https://www.pulumi.com/registry/packages/hyperv/
 */
export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hyperv:vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    /**
     * The command to run on create.
     */
    public readonly create!: pulumi.Output<string | undefined>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    public readonly delete!: pulumi.Output<string | undefined>;
    /**
     * Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
     */
    public readonly memorySize!: pulumi.Output<number | undefined>;
    /**
     * Number of processors to allocate to the Virtual Machine. Defaults to 1.
     */
    public readonly processorCount!: pulumi.Output<number | undefined>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    public readonly update!: pulumi.Output<string | undefined>;
    /**
     * Name of the Virtual Machine
     */
    public readonly vmname!: pulumi.Output<string>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.vmname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmname'");
            }
            resourceInputs["create"] = args ? args.create : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["processorCount"] = args ? args.processorCount : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
            resourceInputs["vmname"] = args ? args.vmname : undefined;
        } else {
            resourceInputs["create"] = undefined /*out*/;
            resourceInputs["delete"] = undefined /*out*/;
            resourceInputs["memorySize"] = undefined /*out*/;
            resourceInputs["processorCount"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["update"] = undefined /*out*/;
            resourceInputs["vmname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["triggers[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Vm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    /**
     * The command to run on create.
     */
    create?: pulumi.Input<string>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    delete?: pulumi.Input<string>;
    /**
     * Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * Number of processors to allocate to the Virtual Machine. Defaults to 1.
     */
    processorCount?: pulumi.Input<number>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    update?: pulumi.Input<string>;
    /**
     * Name of the Virtual Machine
     */
    vmname: pulumi.Input<string>;
}
