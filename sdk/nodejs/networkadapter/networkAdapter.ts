// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * # Network Adapter Resource
 *
 * The Network Adapter resource allows you to create and manage network adapters for virtual machines in Hyper-V.
 *
 * ## Example Usage
 *
 * ### Standalone Network Adapter
 *
 * ```typescript
 * import * as hyperv from "@pulumi/hyperv";
 *
 * // Create a virtual switch
 * const vSwitch = new hyperv.VirtualSwitch("example-switch", {
 *     name: "example-switch",
 *     switchType: "Internal",
 * });
 *
 * // Create a virtual machine
 * const vm = new hyperv.Machine("example-vm", {
 *     machineName: "example-vm",
 *     generation: 2,
 *     processorCount: 2,
 *     memorySize: 2048,
 * });
 *
 * // Create a network adapter for the VM
 * const nic = new hyperv.NetworkAdapter("example-nic", {
 *     name: "example-nic",
 *     vmName: vm.machineName,
 *     switchName: vSwitch.name,
 *     // Optional properties
 *     dhcpGuard: false,
 *     routerGuard: false,
 *     vlanId: 100,
 * });
 * ```
 *
 * ### Using the NetworkAdapters Property in Machine Resource
 *
 * You can also define network adapters directly in the Machine resource using the `networkAdapters` property:
 *
 * ```typescript
 * import * as hyperv from "@pulumi/hyperv";
 *
 * // Create a virtual switch
 * const vSwitch = new hyperv.VirtualSwitch("example-switch", {
 *     name: "example-switch",
 *     switchType: "Internal",
 * });
 *
 * // Create a virtual machine with a network adapter
 * const vm = new hyperv.Machine("example-vm", {
 *     machineName: "example-vm",
 *     generation: 2,
 *     processorCount: 2,
 *     memorySize: 2048,
 *     networkAdapters: [{
 *         name: "Primary Network",
 *         switchName: vSwitch.name,
 *     }],
 * });
 * ```
 *
 * ## Input Properties
 *
 * | Property         | Type     | Required | Description |
 * |------------------|----------|----------|-------------|
 * | name             | string   | Yes      | Name of the network adapter |
 * | vmName           | string   | Yes      | Name of the virtual machine to attach the network adapter to |
 * | switchName       | string   | Yes      | Name of the virtual switch to connect the network adapter to |
 * | macAddress       | string   | No       | MAC address for the network adapter. If not specified, a dynamic MAC address will be generated |
 * | vlanId           | number   | No       | VLAN ID for the network adapter. If not specified, no VLAN tagging is used |
 * | dhcpGuard        | boolean  | No       | Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages |
 * | routerGuard      | boolean  | No       | Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages |
 * | portMirroring    | string   | No       | Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None |
 * | ieeePriorityTag  | boolean  | No       | Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value |
 * | vmqWeight        | number   | No       | VMQ weight for the network adapter. A value of 0 disables VMQ |
 * | ipAddresses      | string   | No       | Comma-separated list of IP addresses to assign to the network adapter |
 *
 * ## Output Properties
 *
 * | Property         | Type     | Description |
 * |------------------|----------|-------------|
 * | adapterId        | string   | The ID of the network adapter |
 *
 * ## Lifecycle Management
 *
 * - **Create**: Creates a new network adapter and attaches it to the specified virtual machine.
 * - **Read**: Reads the properties of an existing network adapter.
 * - **Update**: Updates the properties of an existing network adapter.
 * - **Delete**: Removes a network adapter from a virtual machine.
 *
 * ## Notes
 *
 * - The network adapter creation will fail if the virtual machine or virtual switch does not exist.
 * - Dynamic MAC addresses are automatically generated if not specified.
 * - IP addresses are specified as a comma-separated string (e.g., "192.168.1.10,192.168.1.11").
 * - When updating a network adapter, the virtual machine may need to be powered off depending on the properties being changed.
 */
export class NetworkAdapter extends pulumi.CustomResource {
    /**
     * Get an existing NetworkAdapter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NetworkAdapter {
        return new NetworkAdapter(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hyperv:networkadapter:NetworkAdapter';

    /**
     * Returns true if the given object is an instance of NetworkAdapter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkAdapter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAdapter.__pulumiType;
    }

    /**
     * The ID of the network adapter
     */
    public /*out*/ readonly adapterId!: pulumi.Output<string>;
    /**
     * The command to run on create.
     */
    public readonly create!: pulumi.Output<string | undefined>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    public readonly delete!: pulumi.Output<string | undefined>;
    /**
     * Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
     */
    public readonly dhcpGuard!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
     */
    public readonly ieeePriorityTag!: pulumi.Output<boolean | undefined>;
    /**
     * Comma-separated list of IP addresses to assign to the network adapter.
     */
    public readonly ipAddresses!: pulumi.Output<string | undefined>;
    /**
     * MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
     */
    public readonly macAddress!: pulumi.Output<string | undefined>;
    /**
     * Name of the network adapter
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
     */
    public readonly portMirroring!: pulumi.Output<string | undefined>;
    /**
     * Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
     */
    public readonly routerGuard!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the virtual switch to connect the network adapter to
     */
    public readonly switchName!: pulumi.Output<string>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    public readonly update!: pulumi.Output<string | undefined>;
    /**
     * VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
     */
    public readonly vlanId!: pulumi.Output<number | undefined>;
    /**
     * Name of the virtual machine to attach the network adapter to
     */
    public readonly vmName!: pulumi.Output<string | undefined>;
    /**
     * VMQ weight for the network adapter. A value of 0 disables VMQ.
     */
    public readonly vmqWeight!: pulumi.Output<number | undefined>;

    /**
     * Create a NetworkAdapter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkAdapterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.switchName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switchName'");
            }
            resourceInputs["create"] = args ? args.create : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["dhcpGuard"] = args ? args.dhcpGuard : undefined;
            resourceInputs["ieeePriorityTag"] = args ? args.ieeePriorityTag : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portMirroring"] = args ? args.portMirroring : undefined;
            resourceInputs["routerGuard"] = args ? args.routerGuard : undefined;
            resourceInputs["switchName"] = args ? args.switchName : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["vmName"] = args ? args.vmName : undefined;
            resourceInputs["vmqWeight"] = args ? args.vmqWeight : undefined;
            resourceInputs["adapterId"] = undefined /*out*/;
        } else {
            resourceInputs["adapterId"] = undefined /*out*/;
            resourceInputs["create"] = undefined /*out*/;
            resourceInputs["delete"] = undefined /*out*/;
            resourceInputs["dhcpGuard"] = undefined /*out*/;
            resourceInputs["ieeePriorityTag"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["portMirroring"] = undefined /*out*/;
            resourceInputs["routerGuard"] = undefined /*out*/;
            resourceInputs["switchName"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["update"] = undefined /*out*/;
            resourceInputs["vlanId"] = undefined /*out*/;
            resourceInputs["vmName"] = undefined /*out*/;
            resourceInputs["vmqWeight"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["triggers[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(NetworkAdapter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a NetworkAdapter resource.
 */
export interface NetworkAdapterArgs {
    /**
     * The command to run on create.
     */
    create?: pulumi.Input<string>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    delete?: pulumi.Input<string>;
    /**
     * Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
     */
    dhcpGuard?: pulumi.Input<boolean>;
    /**
     * Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
     */
    ieeePriorityTag?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of IP addresses to assign to the network adapter.
     */
    ipAddresses?: pulumi.Input<string>;
    /**
     * MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Name of the network adapter
     */
    name: pulumi.Input<string>;
    /**
     * Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
     */
    portMirroring?: pulumi.Input<string>;
    /**
     * Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
     */
    routerGuard?: pulumi.Input<boolean>;
    /**
     * Name of the virtual switch to connect the network adapter to
     */
    switchName: pulumi.Input<string>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    update?: pulumi.Input<string>;
    /**
     * VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * Name of the virtual machine to attach the network adapter to
     */
    vmName?: pulumi.Input<string>;
    /**
     * VMQ weight for the network adapter. A value of 0 disables VMQ.
     */
    vmqWeight?: pulumi.Input<number>;
}
