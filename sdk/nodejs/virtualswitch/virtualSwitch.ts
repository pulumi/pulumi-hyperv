// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * # Virtual Switch Resource Management
 *
 * The `virtualswitch` package provides utilities for managing Hyper-V virtual switches.
 *
 * ## Overview
 *
 * This package enables creating, modifying, and deleting virtual switches through the Pulumi Hyper-V provider. Virtual switches enable network connectivity for virtual machines.
 *
 * ## Key Components
 *
 * ### Types
 *
 * - **VirtualSwitch**: Represents a Hyper-V virtual switch.
 *
 * ### Resource Lifecycle Methods
 *
 * - **Create**: Creates a new virtual switch with specified properties.
 * - **Read**: Retrieves information about an existing virtual switch.
 * - **Update**: Modifies properties of an existing virtual switch.
 * - **Delete**: Removes a virtual switch.
 *
 * ## Available Properties
 *
 * The VirtualSwitch resource supports the following properties:
 *
 * | Property | Type | Description |
 * |----------|------|-------------|
 * | `name` | string | Name of the virtual switch |
 * | `switchType` | string | Type of switch: "External", "Internal", or "Private" |
 * | `allowManagementOs` | boolean | Allow the management OS to access the switch (External switches) |
 * | `netAdapterName` | string | Name of the physical network adapter to bind to (External switches) |
 *
 * ## Implementation Details
 *
 * The package uses the WMI interface to interact with Hyper-V's virtual switch management functionality, providing a Go-based interface that integrates with the Pulumi resource model.
 *
 * ## Usage Examples
 *
 * Virtual switches can be defined and managed through the Pulumi Hyper-V provider using the standard resource model.
 *
 * ### Creating an External Switch
 *
 * ```typescript
 * const externalSwitch = new hyperv.VirtualSwitch("external-switch", {
 *     name: "External Network",
 *     switchType: "External",
 *     allowManagementOs: true,
 *     netAdapterName: "Ethernet"
 * });
 * ```
 *
 * ### Creating an Internal Switch
 *
 * ```typescript
 * const internalSwitch = new hyperv.VirtualSwitch("internal-switch", {
 *     name: "Internal Network",
 *     switchType: "Internal"
 * });
 * ```
 */
export class VirtualSwitch extends pulumi.CustomResource {
    /**
     * Get an existing VirtualSwitch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualSwitch {
        return new VirtualSwitch(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hyperv:virtualswitch:VirtualSwitch';

    /**
     * Returns true if the given object is an instance of VirtualSwitch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualSwitch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualSwitch.__pulumiType;
    }

    /**
     * Allow the management OS to access the switch (External switches)
     */
    public readonly allowManagementOs!: pulumi.Output<boolean | undefined>;
    /**
     * The command to run on create.
     */
    public readonly create!: pulumi.Output<string | undefined>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    public readonly delete!: pulumi.Output<string | undefined>;
    /**
     * Name of the virtual switch
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the physical network adapter to bind to (External switches)
     */
    public readonly netAdapterName!: pulumi.Output<string | undefined>;
    /**
     * Notes or description for the virtual switch
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * Type of switch: 'External', 'Internal', or 'Private'
     */
    public readonly switchType!: pulumi.Output<string>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    public readonly update!: pulumi.Output<string | undefined>;

    /**
     * Create a VirtualSwitch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualSwitchArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.switchType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switchType'");
            }
            resourceInputs["allowManagementOs"] = args ? args.allowManagementOs : undefined;
            resourceInputs["create"] = args ? args.create : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netAdapterName"] = args ? args.netAdapterName : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["switchType"] = args ? args.switchType : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
        } else {
            resourceInputs["allowManagementOs"] = undefined /*out*/;
            resourceInputs["create"] = undefined /*out*/;
            resourceInputs["delete"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["netAdapterName"] = undefined /*out*/;
            resourceInputs["notes"] = undefined /*out*/;
            resourceInputs["switchType"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["update"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["triggers[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VirtualSwitch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualSwitch resource.
 */
export interface VirtualSwitchArgs {
    /**
     * Allow the management OS to access the switch (External switches)
     */
    allowManagementOs?: pulumi.Input<boolean>;
    /**
     * The command to run on create.
     */
    create?: pulumi.Input<string>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    delete?: pulumi.Input<string>;
    /**
     * Name of the virtual switch
     */
    name: pulumi.Input<string>;
    /**
     * Name of the physical network adapter to bind to (External switches)
     */
    netAdapterName?: pulumi.Input<string>;
    /**
     * Notes or description for the virtual switch
     */
    notes?: pulumi.Input<string>;
    /**
     * Type of switch: 'External', 'Internal', or 'Private'
     */
    switchType: pulumi.Input<string>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    update?: pulumi.Input<string>;
}
