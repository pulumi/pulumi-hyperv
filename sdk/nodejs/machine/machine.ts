// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * # Hyper-V Machine Resource
 *
 * ## Overview
 *
 * The Machine resource in the Pulumi Hyper-V provider allows you to create, manage, and delete virtual machines on a Hyper-V host. This resource interacts with the Virtual Machine Management Service (VMMS) to perform virtual machine operations.
 *
 * ## Features
 *
 * - Create and delete Hyper-V virtual machines
 * - Configure VM hardware properties including:
 *   - Memory allocation
 *   - Processor count
 *   - VM generation (Gen 1 or Gen 2)
 * - Unique VM identification with automatic ID generation
 *
 * ## Implementation Details
 *
 * ### Resource Structure
 *
 * The Machine resource implementation consists of multiple files:
 * - `machine.go` - Core resource type definition, input/output models, and annotations
 * - `machineController.go` - Implementation of CRUD operations
 * - `machineOutputs.go` - Output-specific methods
 *
 * ### Virtual Machine Creation
 *
 * The `Create` method performs the following steps:
 *
 * 1. **Initialize Connection**: Establishes a connection to the Hyper-V host using WMI
 * 2. **Configure VM Settings**:
 *    - Sets the virtual machine generation (defaults to Generation 2)
 *    - Configures memory settings (defaults to 1024 MB)
 *    - Sets processor count (defaults to 1 vCPU)
 * 3. **Create VM**: Calls the Hyper-V API to create a new virtual machine with the specified settings
 *
 * ### Virtual Machine Read
 *
 * The `Read` method retrieves the current state of a virtual machine by:
 * 1. Connecting to the Hyper-V host
 * 2. Getting the VM by name
 * 3. Retrieving VM properties including:
 *    - VM ID
 *    - Memory settings
 *    - Processor configuration
 *    - Generation
 *
 * ### Virtual Machine Update
 *
 * The `Update` method currently provides a minimal implementation that preserves the VM's state while updating its metadata.
 *
 * ### Virtual Machine Delete
 *
 * The `Delete` method:
 * 1. Connects to the Hyper-V host
 * 2. Gets the virtual machine by name
 * 3. Starts the VM (to ensure it's in a state that can be properly deleted)
 * 4. Gracefully stops the VM
 * 5. Deletes the virtual machine
 *
 * ## Available Properties
 *
 * | Property | Type | Description | Default |
 * |----------|------|-------------|---------|
 * | `machineName` | string | Name of the Virtual Machine | (required) |
 * | `generation` | int | Generation of the Virtual Machine (1 or 2) | 2 |
 * | `processorCount` | int | Number of processors to allocate | 1 |
 * | `memorySize` | int | Memory size in MB | 1024 |
 * | `triggers` | array | Values that trigger resource replacement when changed | (optional) |
 *
 * ## Future Extensions
 *
 * The code includes scaffolding for future enhancements including:
 * - Network adapter configuration
 * - Hard drive attachments
 * - Key protector for secure boot
 * - Additional system settings
 *
 * ## Related Documentation
 *
 * - [Microsoft Hyper-V Documentation](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-on-windows-server)
 * - [Pulumi Hyper-V Provider Documentation](https://www.pulumi.com/registry/packages/hyperv/)
 */
export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Machine {
        return new Machine(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hyperv:machine:Machine';

    /**
     * Returns true if the given object is an instance of Machine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Machine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Machine.__pulumiType;
    }

    /**
     * The command to run on create.
     */
    public readonly create!: pulumi.Output<string | undefined>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    public readonly delete!: pulumi.Output<string | undefined>;
    /**
     * Generation of the Virtual Machine. Defaults to 2.
     */
    public readonly generation!: pulumi.Output<number | undefined>;
    /**
     * Name of the Virtual Machine
     */
    public readonly machineName!: pulumi.Output<string | undefined>;
    /**
     * Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
     */
    public readonly memorySize!: pulumi.Output<number | undefined>;
    /**
     * Number of processors to allocate to the Virtual Machine. Defaults to 1.
     */
    public readonly processorCount!: pulumi.Output<number | undefined>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    public readonly update!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vmId!: pulumi.Output<string>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MachineArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["create"] = args ? args.create : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["generation"] = args ? args.generation : undefined;
            resourceInputs["machineName"] = args ? args.machineName : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["processorCount"] = args ? args.processorCount : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
            resourceInputs["vmId"] = undefined /*out*/;
        } else {
            resourceInputs["create"] = undefined /*out*/;
            resourceInputs["delete"] = undefined /*out*/;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["machineName"] = undefined /*out*/;
            resourceInputs["memorySize"] = undefined /*out*/;
            resourceInputs["processorCount"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["update"] = undefined /*out*/;
            resourceInputs["vmId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["triggers[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Machine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * The command to run on create.
     */
    create?: pulumi.Input<string>;
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     */
    delete?: pulumi.Input<string>;
    /**
     * Generation of the Virtual Machine. Defaults to 2.
     */
    generation?: pulumi.Input<number>;
    /**
     * Name of the Virtual Machine
     */
    machineName?: pulumi.Input<string>;
    /**
     * Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * Number of processors to allocate to the Virtual Machine. Defaults to 1.
     */
    processorCount?: pulumi.Input<number>;
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the "create" command will be re-run.
     * Please see the resource documentation for examples.
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * The command to run on update, if empty, create will 
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR 
     * are set to the stdout and stderr properties of the Command resource from previous 
     * create or update steps.
     */
    update?: pulumi.Input<string>;
}
