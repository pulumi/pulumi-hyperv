// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hyperv.virtualswitch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.hyperv.Utilities;
import com.pulumi.hyperv.virtualswitch.VirtualSwitchArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * # Virtual Switch Resource Management
 * 
 * The `virtualswitch` package provides utilities for managing Hyper-V virtual switches.
 * 
 * ## Overview
 * 
 * This package enables creating, modifying, and deleting virtual switches through the Pulumi Hyper-V provider. Virtual switches enable network connectivity for virtual machines.
 * 
 * ## Key Components
 * 
 * ### Types
 * 
 * - **VirtualSwitch**: Represents a Hyper-V virtual switch.
 * 
 * ### Resource Lifecycle Methods
 * 
 * - **Create**: Creates a new virtual switch with specified properties.
 * - **Read**: Retrieves information about an existing virtual switch.
 * - **Update**: Modifies properties of an existing virtual switch.
 * - **Delete**: Removes a virtual switch.
 * 
 * ## Available Properties
 * 
 * The VirtualSwitch resource supports the following properties:
 * 
 * | Property | Type | Description |
 * |----------|------|-------------|
 * | `name` | string | Name of the virtual switch |
 * | `switchType` | string | Type of switch: &#34;External&#34;, &#34;Internal&#34;, or &#34;Private&#34; |
 * | `allowManagementOs` | boolean | Allow the management OS to access the switch (External switches) |
 * | `netAdapterName` | string | Name of the physical network adapter to bind to (External switches) |
 * 
 * ## Implementation Details
 * 
 * The package uses the WMI interface to interact with Hyper-V&#39;s virtual switch management functionality, providing a Go-based interface that integrates with the Pulumi resource model.
 * 
 * ## Usage Examples
 * 
 * Virtual switches can be defined and managed through the Pulumi Hyper-V provider using the standard resource model.
 * 
 * ### Creating an External Switch
 * 
 * ### Creating an Internal Switch
 * 
 */
@ResourceType(type="hyperv:virtualswitch:VirtualSwitch")
public class VirtualSwitch extends com.pulumi.resources.CustomResource {
    /**
     * Allow the management OS to access the switch (External switches)
     * 
     */
    @Export(name="allowManagementOs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowManagementOs;

    /**
     * @return Allow the management OS to access the switch (External switches)
     * 
     */
    public Output<Optional<Boolean>> allowManagementOs() {
        return Codegen.optional(this.allowManagementOs);
    }
    /**
     * The command to run on create.
     * 
     */
    @Export(name="create", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> create;

    /**
     * @return The command to run on create.
     * 
     */
    public Output<Optional<String>> create() {
        return Codegen.optional(this.create);
    }
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    @Export(name="delete", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> delete;

    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    public Output<Optional<String>> delete() {
        return Codegen.optional(this.delete);
    }
    /**
     * Name of the virtual switch
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the virtual switch
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Name of the physical network adapter to bind to (External switches)
     * 
     */
    @Export(name="netAdapterName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> netAdapterName;

    /**
     * @return Name of the physical network adapter to bind to (External switches)
     * 
     */
    public Output<Optional<String>> netAdapterName() {
        return Codegen.optional(this.netAdapterName);
    }
    /**
     * Notes or description for the virtual switch
     * 
     */
    @Export(name="notes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notes;

    /**
     * @return Notes or description for the virtual switch
     * 
     */
    public Output<Optional<String>> notes() {
        return Codegen.optional(this.notes);
    }
    /**
     * Type of switch: &#39;External&#39;, &#39;Internal&#39;, or &#39;Private&#39;
     * 
     */
    @Export(name="switchType", refs={String.class}, tree="[0]")
    private Output<String> switchType;

    /**
     * @return Type of switch: &#39;External&#39;, &#39;Internal&#39;, or &#39;Private&#39;
     * 
     */
    public Output<String> switchType() {
        return this.switchType;
    }
    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Object>> triggers;

    /**
     * @return Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    public Output<Optional<List<Object>>> triggers() {
        return Codegen.optional(this.triggers);
    }
    /**
     * The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    @Export(name="update", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> update;

    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    public Output<Optional<String>> update() {
        return Codegen.optional(this.update);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualSwitch(java.lang.String name) {
        this(name, VirtualSwitchArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualSwitch(java.lang.String name, VirtualSwitchArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualSwitch(java.lang.String name, VirtualSwitchArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("hyperv:virtualswitch:VirtualSwitch", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VirtualSwitch(java.lang.String name, Output<java.lang.String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("hyperv:virtualswitch:VirtualSwitch", name, null, makeResourceOptions(options, id), false);
    }

    private static VirtualSwitchArgs makeArgs(VirtualSwitchArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VirtualSwitchArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualSwitch get(java.lang.String name, Output<java.lang.String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualSwitch(name, id, options);
    }
}
