// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hyperv.networkadapter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAdapterArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAdapterArgs Empty = new NetworkAdapterArgs();

    /**
     * The command to run on create.
     * 
     */
    @Import(name="create")
    private @Nullable Output<String> create;

    /**
     * @return The command to run on create.
     * 
     */
    public Optional<Output<String>> create() {
        return Optional.ofNullable(this.create);
    }

    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    @Import(name="delete")
    private @Nullable Output<String> delete;

    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    public Optional<Output<String>> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
     * 
     */
    @Import(name="dhcpGuard")
    private @Nullable Output<Boolean> dhcpGuard;

    /**
     * @return Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
     * 
     */
    public Optional<Output<Boolean>> dhcpGuard() {
        return Optional.ofNullable(this.dhcpGuard);
    }

    /**
     * Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
     * 
     */
    @Import(name="ieeePriorityTag")
    private @Nullable Output<Boolean> ieeePriorityTag;

    /**
     * @return Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
     * 
     */
    public Optional<Output<Boolean>> ieeePriorityTag() {
        return Optional.ofNullable(this.ieeePriorityTag);
    }

    /**
     * Comma-separated list of IP addresses to assign to the network adapter.
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<String> ipAddresses;

    /**
     * @return Comma-separated list of IP addresses to assign to the network adapter.
     * 
     */
    public Optional<Output<String>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * Name of the network adapter
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the network adapter
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
     * 
     */
    @Import(name="portMirroring")
    private @Nullable Output<String> portMirroring;

    /**
     * @return Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
     * 
     */
    public Optional<Output<String>> portMirroring() {
        return Optional.ofNullable(this.portMirroring);
    }

    /**
     * Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
     * 
     */
    @Import(name="routerGuard")
    private @Nullable Output<Boolean> routerGuard;

    /**
     * @return Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
     * 
     */
    public Optional<Output<Boolean>> routerGuard() {
        return Optional.ofNullable(this.routerGuard);
    }

    /**
     * Name of the virtual switch to connect the network adapter to
     * 
     */
    @Import(name="switchName", required=true)
    private Output<String> switchName;

    /**
     * @return Name of the virtual switch to connect the network adapter to
     * 
     */
    public Output<String> switchName() {
        return this.switchName;
    }

    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<List<Object>> triggers;

    /**
     * @return Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    public Optional<Output<List<Object>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    @Import(name="update")
    private @Nullable Output<String> update;

    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    public Optional<Output<String>> update() {
        return Optional.ofNullable(this.update);
    }

    /**
     * VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * Name of the virtual machine to attach the network adapter to
     * 
     */
    @Import(name="vmName")
    private @Nullable Output<String> vmName;

    /**
     * @return Name of the virtual machine to attach the network adapter to
     * 
     */
    public Optional<Output<String>> vmName() {
        return Optional.ofNullable(this.vmName);
    }

    /**
     * VMQ weight for the network adapter. A value of 0 disables VMQ.
     * 
     */
    @Import(name="vmqWeight")
    private @Nullable Output<Integer> vmqWeight;

    /**
     * @return VMQ weight for the network adapter. A value of 0 disables VMQ.
     * 
     */
    public Optional<Output<Integer>> vmqWeight() {
        return Optional.ofNullable(this.vmqWeight);
    }

    private NetworkAdapterArgs() {}

    private NetworkAdapterArgs(NetworkAdapterArgs $) {
        this.create = $.create;
        this.delete = $.delete;
        this.dhcpGuard = $.dhcpGuard;
        this.ieeePriorityTag = $.ieeePriorityTag;
        this.ipAddresses = $.ipAddresses;
        this.macAddress = $.macAddress;
        this.name = $.name;
        this.portMirroring = $.portMirroring;
        this.routerGuard = $.routerGuard;
        this.switchName = $.switchName;
        this.triggers = $.triggers;
        this.update = $.update;
        this.vlanId = $.vlanId;
        this.vmName = $.vmName;
        this.vmqWeight = $.vmqWeight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAdapterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAdapterArgs $;

        public Builder() {
            $ = new NetworkAdapterArgs();
        }

        public Builder(NetworkAdapterArgs defaults) {
            $ = new NetworkAdapterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param create The command to run on create.
         * 
         * @return builder
         * 
         */
        public Builder create(@Nullable Output<String> create) {
            $.create = create;
            return this;
        }

        /**
         * @param create The command to run on create.
         * 
         * @return builder
         * 
         */
        public Builder create(String create) {
            return create(Output.of(create));
        }

        /**
         * @param delete The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
         * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
         * Command resource from previous create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder delete(@Nullable Output<String> delete) {
            $.delete = delete;
            return this;
        }

        /**
         * @param delete The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
         * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
         * Command resource from previous create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder delete(String delete) {
            return delete(Output.of(delete));
        }

        /**
         * @param dhcpGuard Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
         * 
         * @return builder
         * 
         */
        public Builder dhcpGuard(@Nullable Output<Boolean> dhcpGuard) {
            $.dhcpGuard = dhcpGuard;
            return this;
        }

        /**
         * @param dhcpGuard Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
         * 
         * @return builder
         * 
         */
        public Builder dhcpGuard(Boolean dhcpGuard) {
            return dhcpGuard(Output.of(dhcpGuard));
        }

        /**
         * @param ieeePriorityTag Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
         * 
         * @return builder
         * 
         */
        public Builder ieeePriorityTag(@Nullable Output<Boolean> ieeePriorityTag) {
            $.ieeePriorityTag = ieeePriorityTag;
            return this;
        }

        /**
         * @param ieeePriorityTag Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
         * 
         * @return builder
         * 
         */
        public Builder ieeePriorityTag(Boolean ieeePriorityTag) {
            return ieeePriorityTag(Output.of(ieeePriorityTag));
        }

        /**
         * @param ipAddresses Comma-separated list of IP addresses to assign to the network adapter.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable Output<String> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses Comma-separated list of IP addresses to assign to the network adapter.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(String ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        /**
         * @param macAddress MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param name Name of the network adapter
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the network adapter
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param portMirroring Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
         * 
         * @return builder
         * 
         */
        public Builder portMirroring(@Nullable Output<String> portMirroring) {
            $.portMirroring = portMirroring;
            return this;
        }

        /**
         * @param portMirroring Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
         * 
         * @return builder
         * 
         */
        public Builder portMirroring(String portMirroring) {
            return portMirroring(Output.of(portMirroring));
        }

        /**
         * @param routerGuard Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
         * 
         * @return builder
         * 
         */
        public Builder routerGuard(@Nullable Output<Boolean> routerGuard) {
            $.routerGuard = routerGuard;
            return this;
        }

        /**
         * @param routerGuard Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
         * 
         * @return builder
         * 
         */
        public Builder routerGuard(Boolean routerGuard) {
            return routerGuard(Output.of(routerGuard));
        }

        /**
         * @param switchName Name of the virtual switch to connect the network adapter to
         * 
         * @return builder
         * 
         */
        public Builder switchName(Output<String> switchName) {
            $.switchName = switchName;
            return this;
        }

        /**
         * @param switchName Name of the virtual switch to connect the network adapter to
         * 
         * @return builder
         * 
         */
        public Builder switchName(String switchName) {
            return switchName(Output.of(switchName));
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<List<Object>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(List<Object> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Object... triggers) {
            return triggers(List.of(triggers));
        }

        /**
         * @param update The command to run on update, if empty, create will
         * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
         * are set to the stdout and stderr properties of the Command resource from previous
         * create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder update(@Nullable Output<String> update) {
            $.update = update;
            return this;
        }

        /**
         * @param update The command to run on update, if empty, create will
         * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
         * are set to the stdout and stderr properties of the Command resource from previous
         * create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder update(String update) {
            return update(Output.of(update));
        }

        /**
         * @param vlanId VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vmName Name of the virtual machine to attach the network adapter to
         * 
         * @return builder
         * 
         */
        public Builder vmName(@Nullable Output<String> vmName) {
            $.vmName = vmName;
            return this;
        }

        /**
         * @param vmName Name of the virtual machine to attach the network adapter to
         * 
         * @return builder
         * 
         */
        public Builder vmName(String vmName) {
            return vmName(Output.of(vmName));
        }

        /**
         * @param vmqWeight VMQ weight for the network adapter. A value of 0 disables VMQ.
         * 
         * @return builder
         * 
         */
        public Builder vmqWeight(@Nullable Output<Integer> vmqWeight) {
            $.vmqWeight = vmqWeight;
            return this;
        }

        /**
         * @param vmqWeight VMQ weight for the network adapter. A value of 0 disables VMQ.
         * 
         * @return builder
         * 
         */
        public Builder vmqWeight(Integer vmqWeight) {
            return vmqWeight(Output.of(vmqWeight));
        }

        public NetworkAdapterArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("NetworkAdapterArgs", "name");
            }
            if ($.switchName == null) {
                throw new MissingRequiredPropertyException("NetworkAdapterArgs", "switchName");
            }
            return $;
        }
    }

}
