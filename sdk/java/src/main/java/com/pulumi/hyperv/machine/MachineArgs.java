// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hyperv.machine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineArgs Empty = new MachineArgs();

    /**
     * The command to run on create.
     * 
     */
    @Import(name="create")
    private @Nullable Output<String> create;

    /**
     * @return The command to run on create.
     * 
     */
    public Optional<Output<String>> create() {
        return Optional.ofNullable(this.create);
    }

    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    @Import(name="delete")
    private @Nullable Output<String> delete;

    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    public Optional<Output<String>> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * Generation of the Virtual Machine. Defaults to 2.
     * 
     */
    @Import(name="generation")
    private @Nullable Output<Integer> generation;

    /**
     * @return Generation of the Virtual Machine. Defaults to 2.
     * 
     */
    public Optional<Output<Integer>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * Name of the Virtual Machine
     * 
     */
    @Import(name="machineName")
    private @Nullable Output<String> machineName;

    /**
     * @return Name of the Virtual Machine
     * 
     */
    public Optional<Output<String>> machineName() {
        return Optional.ofNullable(this.machineName);
    }

    /**
     * Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
     * 
     */
    @Import(name="memorySize")
    private @Nullable Output<Integer> memorySize;

    /**
     * @return Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
     * 
     */
    public Optional<Output<Integer>> memorySize() {
        return Optional.ofNullable(this.memorySize);
    }

    /**
     * Number of processors to allocate to the Virtual Machine. Defaults to 1.
     * 
     */
    @Import(name="processorCount")
    private @Nullable Output<Integer> processorCount;

    /**
     * @return Number of processors to allocate to the Virtual Machine. Defaults to 1.
     * 
     */
    public Optional<Output<Integer>> processorCount() {
        return Optional.ofNullable(this.processorCount);
    }

    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<List<Object>> triggers;

    /**
     * @return Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    public Optional<Output<List<Object>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    @Import(name="update")
    private @Nullable Output<String> update;

    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    public Optional<Output<String>> update() {
        return Optional.ofNullable(this.update);
    }

    private MachineArgs() {}

    private MachineArgs(MachineArgs $) {
        this.create = $.create;
        this.delete = $.delete;
        this.generation = $.generation;
        this.machineName = $.machineName;
        this.memorySize = $.memorySize;
        this.processorCount = $.processorCount;
        this.triggers = $.triggers;
        this.update = $.update;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineArgs $;

        public Builder() {
            $ = new MachineArgs();
        }

        public Builder(MachineArgs defaults) {
            $ = new MachineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param create The command to run on create.
         * 
         * @return builder
         * 
         */
        public Builder create(@Nullable Output<String> create) {
            $.create = create;
            return this;
        }

        /**
         * @param create The command to run on create.
         * 
         * @return builder
         * 
         */
        public Builder create(String create) {
            return create(Output.of(create));
        }

        /**
         * @param delete The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
         * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
         * Command resource from previous create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder delete(@Nullable Output<String> delete) {
            $.delete = delete;
            return this;
        }

        /**
         * @param delete The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
         * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
         * Command resource from previous create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder delete(String delete) {
            return delete(Output.of(delete));
        }

        /**
         * @param generation Generation of the Virtual Machine. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder generation(@Nullable Output<Integer> generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param generation Generation of the Virtual Machine. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder generation(Integer generation) {
            return generation(Output.of(generation));
        }

        /**
         * @param machineName Name of the Virtual Machine
         * 
         * @return builder
         * 
         */
        public Builder machineName(@Nullable Output<String> machineName) {
            $.machineName = machineName;
            return this;
        }

        /**
         * @param machineName Name of the Virtual Machine
         * 
         * @return builder
         * 
         */
        public Builder machineName(String machineName) {
            return machineName(Output.of(machineName));
        }

        /**
         * @param memorySize Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
         * 
         * @return builder
         * 
         */
        public Builder memorySize(@Nullable Output<Integer> memorySize) {
            $.memorySize = memorySize;
            return this;
        }

        /**
         * @param memorySize Amount of memory to allocate to the Virtual Machine in MB. Defaults to 1024.
         * 
         * @return builder
         * 
         */
        public Builder memorySize(Integer memorySize) {
            return memorySize(Output.of(memorySize));
        }

        /**
         * @param processorCount Number of processors to allocate to the Virtual Machine. Defaults to 1.
         * 
         * @return builder
         * 
         */
        public Builder processorCount(@Nullable Output<Integer> processorCount) {
            $.processorCount = processorCount;
            return this;
        }

        /**
         * @param processorCount Number of processors to allocate to the Virtual Machine. Defaults to 1.
         * 
         * @return builder
         * 
         */
        public Builder processorCount(Integer processorCount) {
            return processorCount(Output.of(processorCount));
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<List<Object>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(List<Object> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Object... triggers) {
            return triggers(List.of(triggers));
        }

        /**
         * @param update The command to run on update, if empty, create will
         * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
         * are set to the stdout and stderr properties of the Command resource from previous
         * create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder update(@Nullable Output<String> update) {
            $.update = update;
            return this;
        }

        /**
         * @param update The command to run on update, if empty, create will
         * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
         * are set to the stdout and stderr properties of the Command resource from previous
         * create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder update(String update) {
            return update(Output.of(update));
        }

        public MachineArgs build() {
            return $;
        }
    }

}
