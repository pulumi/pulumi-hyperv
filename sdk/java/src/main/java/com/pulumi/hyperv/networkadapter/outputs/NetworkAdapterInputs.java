// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hyperv.networkadapter.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkAdapterInputs {
    /**
     * @return The command to run on create.
     * 
     */
    private @Nullable String create;
    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    private @Nullable String delete;
    /**
     * @return Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
     * 
     */
    private @Nullable Boolean dhcpGuard;
    /**
     * @return Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
     * 
     */
    private @Nullable Boolean ieeePriorityTag;
    /**
     * @return Comma-separated list of IP addresses to assign to the network adapter.
     * 
     */
    private @Nullable String ipAddresses;
    /**
     * @return MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
     * 
     */
    private @Nullable String macAddress;
    /**
     * @return Name of the network adapter
     * 
     */
    private String name;
    /**
     * @return Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
     * 
     */
    private @Nullable String portMirroring;
    /**
     * @return Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
     * 
     */
    private @Nullable Boolean routerGuard;
    /**
     * @return Name of the virtual switch to connect the network adapter to
     * 
     */
    private String switchName;
    /**
     * @return Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    private @Nullable List<Object> triggers;
    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    private @Nullable String update;
    /**
     * @return VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
     * 
     */
    private @Nullable Integer vlanId;
    /**
     * @return Name of the virtual machine to attach the network adapter to
     * 
     */
    private @Nullable String vmName;
    /**
     * @return VMQ weight for the network adapter. A value of 0 disables VMQ.
     * 
     */
    private @Nullable Integer vmqWeight;

    private NetworkAdapterInputs() {}
    /**
     * @return The command to run on create.
     * 
     */
    public Optional<String> create() {
        return Optional.ofNullable(this.create);
    }
    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    public Optional<String> delete() {
        return Optional.ofNullable(this.delete);
    }
    /**
     * @return Enable DHCP Guard. Prevents the virtual machine from broadcasting DHCP server messages.
     * 
     */
    public Optional<Boolean> dhcpGuard() {
        return Optional.ofNullable(this.dhcpGuard);
    }
    /**
     * @return Enable IEEE Priority Tagging. Allows the virtual machine to tag outgoing network traffic with an IEEE 802.1p priority value.
     * 
     */
    public Optional<Boolean> ieeePriorityTag() {
        return Optional.ofNullable(this.ieeePriorityTag);
    }
    /**
     * @return Comma-separated list of IP addresses to assign to the network adapter.
     * 
     */
    public Optional<String> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }
    /**
     * @return MAC address for the network adapter. If not specified, a dynamic MAC address will be generated.
     * 
     */
    public Optional<String> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }
    /**
     * @return Name of the network adapter
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Port mirroring mode. Valid values are None, Source, Destination, and Both. Defaults to None.
     * 
     */
    public Optional<String> portMirroring() {
        return Optional.ofNullable(this.portMirroring);
    }
    /**
     * @return Enable Router Guard. Prevents the virtual machine from broadcasting router advertisement and discovery messages.
     * 
     */
    public Optional<Boolean> routerGuard() {
        return Optional.ofNullable(this.routerGuard);
    }
    /**
     * @return Name of the virtual switch to connect the network adapter to
     * 
     */
    public String switchName() {
        return this.switchName;
    }
    /**
     * @return Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    public List<Object> triggers() {
        return this.triggers == null ? List.of() : this.triggers;
    }
    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    public Optional<String> update() {
        return Optional.ofNullable(this.update);
    }
    /**
     * @return VLAN ID for the network adapter. If not specified, no VLAN tagging is used.
     * 
     */
    public Optional<Integer> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }
    /**
     * @return Name of the virtual machine to attach the network adapter to
     * 
     */
    public Optional<String> vmName() {
        return Optional.ofNullable(this.vmName);
    }
    /**
     * @return VMQ weight for the network adapter. A value of 0 disables VMQ.
     * 
     */
    public Optional<Integer> vmqWeight() {
        return Optional.ofNullable(this.vmqWeight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkAdapterInputs defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String create;
        private @Nullable String delete;
        private @Nullable Boolean dhcpGuard;
        private @Nullable Boolean ieeePriorityTag;
        private @Nullable String ipAddresses;
        private @Nullable String macAddress;
        private String name;
        private @Nullable String portMirroring;
        private @Nullable Boolean routerGuard;
        private String switchName;
        private @Nullable List<Object> triggers;
        private @Nullable String update;
        private @Nullable Integer vlanId;
        private @Nullable String vmName;
        private @Nullable Integer vmqWeight;
        public Builder() {}
        public Builder(NetworkAdapterInputs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.create = defaults.create;
    	      this.delete = defaults.delete;
    	      this.dhcpGuard = defaults.dhcpGuard;
    	      this.ieeePriorityTag = defaults.ieeePriorityTag;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.macAddress = defaults.macAddress;
    	      this.name = defaults.name;
    	      this.portMirroring = defaults.portMirroring;
    	      this.routerGuard = defaults.routerGuard;
    	      this.switchName = defaults.switchName;
    	      this.triggers = defaults.triggers;
    	      this.update = defaults.update;
    	      this.vlanId = defaults.vlanId;
    	      this.vmName = defaults.vmName;
    	      this.vmqWeight = defaults.vmqWeight;
        }

        @CustomType.Setter
        public Builder create(@Nullable String create) {

            this.create = create;
            return this;
        }
        @CustomType.Setter
        public Builder delete(@Nullable String delete) {

            this.delete = delete;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpGuard(@Nullable Boolean dhcpGuard) {

            this.dhcpGuard = dhcpGuard;
            return this;
        }
        @CustomType.Setter
        public Builder ieeePriorityTag(@Nullable Boolean ieeePriorityTag) {

            this.ieeePriorityTag = ieeePriorityTag;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(@Nullable String ipAddresses) {

            this.ipAddresses = ipAddresses;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(@Nullable String macAddress) {

            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("NetworkAdapterInputs", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder portMirroring(@Nullable String portMirroring) {

            this.portMirroring = portMirroring;
            return this;
        }
        @CustomType.Setter
        public Builder routerGuard(@Nullable Boolean routerGuard) {

            this.routerGuard = routerGuard;
            return this;
        }
        @CustomType.Setter
        public Builder switchName(String switchName) {
            if (switchName == null) {
              throw new MissingRequiredPropertyException("NetworkAdapterInputs", "switchName");
            }
            this.switchName = switchName;
            return this;
        }
        @CustomType.Setter
        public Builder triggers(@Nullable List<Object> triggers) {

            this.triggers = triggers;
            return this;
        }
        public Builder triggers(Object... triggers) {
            return triggers(List.of(triggers));
        }
        @CustomType.Setter
        public Builder update(@Nullable String update) {

            this.update = update;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(@Nullable Integer vlanId) {

            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vmName(@Nullable String vmName) {

            this.vmName = vmName;
            return this;
        }
        @CustomType.Setter
        public Builder vmqWeight(@Nullable Integer vmqWeight) {

            this.vmqWeight = vmqWeight;
            return this;
        }
        public NetworkAdapterInputs build() {
            final var _resultValue = new NetworkAdapterInputs();
            _resultValue.create = create;
            _resultValue.delete = delete;
            _resultValue.dhcpGuard = dhcpGuard;
            _resultValue.ieeePriorityTag = ieeePriorityTag;
            _resultValue.ipAddresses = ipAddresses;
            _resultValue.macAddress = macAddress;
            _resultValue.name = name;
            _resultValue.portMirroring = portMirroring;
            _resultValue.routerGuard = routerGuard;
            _resultValue.switchName = switchName;
            _resultValue.triggers = triggers;
            _resultValue.update = update;
            _resultValue.vlanId = vlanId;
            _resultValue.vmName = vmName;
            _resultValue.vmqWeight = vmqWeight;
            return _resultValue;
        }
    }
}
