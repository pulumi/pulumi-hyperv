// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hyperv.virtualswitch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualSwitchArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualSwitchArgs Empty = new VirtualSwitchArgs();

    /**
     * Allow the management OS to access the switch (External switches)
     * 
     */
    @Import(name="allowManagementOs")
    private @Nullable Output<Boolean> allowManagementOs;

    /**
     * @return Allow the management OS to access the switch (External switches)
     * 
     */
    public Optional<Output<Boolean>> allowManagementOs() {
        return Optional.ofNullable(this.allowManagementOs);
    }

    /**
     * The command to run on create.
     * 
     */
    @Import(name="create")
    private @Nullable Output<String> create;

    /**
     * @return The command to run on create.
     * 
     */
    public Optional<Output<String>> create() {
        return Optional.ofNullable(this.create);
    }

    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    @Import(name="delete")
    private @Nullable Output<String> delete;

    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    public Optional<Output<String>> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * Name of the virtual switch
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the virtual switch
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the physical network adapter to bind to (External switches)
     * 
     */
    @Import(name="netAdapterName")
    private @Nullable Output<String> netAdapterName;

    /**
     * @return Name of the physical network adapter to bind to (External switches)
     * 
     */
    public Optional<Output<String>> netAdapterName() {
        return Optional.ofNullable(this.netAdapterName);
    }

    /**
     * Notes or description for the virtual switch
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Notes or description for the virtual switch
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * Type of switch: &#39;External&#39;, &#39;Internal&#39;, or &#39;Private&#39;
     * 
     */
    @Import(name="switchType", required=true)
    private Output<String> switchType;

    /**
     * @return Type of switch: &#39;External&#39;, &#39;Internal&#39;, or &#39;Private&#39;
     * 
     */
    public Output<String> switchType() {
        return this.switchType;
    }

    /**
     * Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<List<Object>> triggers;

    /**
     * @return Trigger a resource replacement on changes to any of these values. The
     * trigger values can be of any type. If a value is different in the current update compared to the
     * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
     * Please see the resource documentation for examples.
     * 
     */
    public Optional<Output<List<Object>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    @Import(name="update")
    private @Nullable Output<String> update;

    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    public Optional<Output<String>> update() {
        return Optional.ofNullable(this.update);
    }

    private VirtualSwitchArgs() {}

    private VirtualSwitchArgs(VirtualSwitchArgs $) {
        this.allowManagementOs = $.allowManagementOs;
        this.create = $.create;
        this.delete = $.delete;
        this.name = $.name;
        this.netAdapterName = $.netAdapterName;
        this.notes = $.notes;
        this.switchType = $.switchType;
        this.triggers = $.triggers;
        this.update = $.update;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualSwitchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualSwitchArgs $;

        public Builder() {
            $ = new VirtualSwitchArgs();
        }

        public Builder(VirtualSwitchArgs defaults) {
            $ = new VirtualSwitchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowManagementOs Allow the management OS to access the switch (External switches)
         * 
         * @return builder
         * 
         */
        public Builder allowManagementOs(@Nullable Output<Boolean> allowManagementOs) {
            $.allowManagementOs = allowManagementOs;
            return this;
        }

        /**
         * @param allowManagementOs Allow the management OS to access the switch (External switches)
         * 
         * @return builder
         * 
         */
        public Builder allowManagementOs(Boolean allowManagementOs) {
            return allowManagementOs(Output.of(allowManagementOs));
        }

        /**
         * @param create The command to run on create.
         * 
         * @return builder
         * 
         */
        public Builder create(@Nullable Output<String> create) {
            $.create = create;
            return this;
        }

        /**
         * @param create The command to run on create.
         * 
         * @return builder
         * 
         */
        public Builder create(String create) {
            return create(Output.of(create));
        }

        /**
         * @param delete The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
         * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
         * Command resource from previous create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder delete(@Nullable Output<String> delete) {
            $.delete = delete;
            return this;
        }

        /**
         * @param delete The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
         * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
         * Command resource from previous create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder delete(String delete) {
            return delete(Output.of(delete));
        }

        /**
         * @param name Name of the virtual switch
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the virtual switch
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param netAdapterName Name of the physical network adapter to bind to (External switches)
         * 
         * @return builder
         * 
         */
        public Builder netAdapterName(@Nullable Output<String> netAdapterName) {
            $.netAdapterName = netAdapterName;
            return this;
        }

        /**
         * @param netAdapterName Name of the physical network adapter to bind to (External switches)
         * 
         * @return builder
         * 
         */
        public Builder netAdapterName(String netAdapterName) {
            return netAdapterName(Output.of(netAdapterName));
        }

        /**
         * @param notes Notes or description for the virtual switch
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Notes or description for the virtual switch
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param switchType Type of switch: &#39;External&#39;, &#39;Internal&#39;, or &#39;Private&#39;
         * 
         * @return builder
         * 
         */
        public Builder switchType(Output<String> switchType) {
            $.switchType = switchType;
            return this;
        }

        /**
         * @param switchType Type of switch: &#39;External&#39;, &#39;Internal&#39;, or &#39;Private&#39;
         * 
         * @return builder
         * 
         */
        public Builder switchType(String switchType) {
            return switchType(Output.of(switchType));
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<List<Object>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(List<Object> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggers Trigger a resource replacement on changes to any of these values. The
         * trigger values can be of any type. If a value is different in the current update compared to the
         * previous update, the resource will be replaced, i.e., the &#34;create&#34; command will be re-run.
         * Please see the resource documentation for examples.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Object... triggers) {
            return triggers(List.of(triggers));
        }

        /**
         * @param update The command to run on update, if empty, create will
         * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
         * are set to the stdout and stderr properties of the Command resource from previous
         * create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder update(@Nullable Output<String> update) {
            $.update = update;
            return this;
        }

        /**
         * @param update The command to run on update, if empty, create will
         * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
         * are set to the stdout and stderr properties of the Command resource from previous
         * create or update steps.
         * 
         * @return builder
         * 
         */
        public Builder update(String update) {
            return update(Output.of(update));
        }

        public VirtualSwitchArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("VirtualSwitchArgs", "name");
            }
            if ($.switchType == null) {
                throw new MissingRequiredPropertyException("VirtualSwitchArgs", "switchType");
            }
            return $;
        }
    }

}
